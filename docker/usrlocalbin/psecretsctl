#!/bin/sh

# A script to control psecrets
# This exists to separate psecrets the generic Python script from our use of it
# that relies on specific paths and values everywhere.

# Encrypted private GPG key path to import
importseckey="$HOME/.gnupg/psyops.secret.gpg.key.asc"
# Unencrypted public GPG key path to import
importpubkey="$HOME/.gnupg/psyops.secret.gpg.pubkey.asc"
# Unencrypted GPG ownertrust database to import
importtrust="$HOME/.gnupg/psyops.secret.gpg.ownertrust.db.asc"
# Secret GPG key ID
seckeyid="3426CF80"
# Public GPG key ID
pubkeyid="664C82AD"
# Location to store (plaintext!) GPG passphrase
gpgpassfile="$HOME/.gpg.passphrase"
# Location to decrypt secrets repo
repopath="$HOME/.secrets"
# Unencrypted public SSH key path
pubsshkey="$HOME/.ssh/id_ed25519.pub"
# Encrypted private SSH key path
encsshkey="$HOME/.ssh/id_ed25519.gpg"
# Location to decrypt private SSH key
decsshkey="$HOME/.ssh/id_ed25519"
# Branch name for encrypted commits. Must be name of both the local branch
# we'll check out AND the remote branch that is encrypted before pushing
branchname="master"
# Name to use for the gcrypt remote
remotename="origin"
# URI for the gcrypt remote
# remoteuri="gcrypt::git@github.com:mrled/psyops-secrets.git"
remoteuri="file:///psyops/submod/psyops-secrets"
# The psyops-secrets repo has a script to symlink its config files into the
# homedir... if it exists, the repo was successfully decrypted
secretssymlink="$repopath/symlink.sh"

usage_exit() {
    cat <<ENDUSAGE
$0: Control psecrets
USAGE: $0 <unlock|testlock>
ENDUSAGE
    exit 1
}

test_psecrets_exit() {
    exec test -e "$secretssymlink"
}

unlock_psecrets_exit() {
    exec psecrets unlock \
        --import-secret-key "$importseckey" \
        --import-public-key "$importpubkey" \
        --import-ownertrust-db "$importtrust" \
        --gpg-secret-key-id "$seckeyid" \
        --gpg-passphrase-file "$gpgpassfile" \
        --ssh-encrypted-private-key "$encsshkey" \
        --ssh-decrypted-private-key "$decsshkey" \
        --ssh-public-key "$pubsshkey" \
        --git-branch "$branchname" \
        --git-remote "$remotename" \
        --git-remote-uri "$remoteuri" \
        --git-local-repository "$repopath" \
        --clone-first
}

if test $# -ne 1; then usage_exit; fi
for arg in "$@"; do
    if test "$arg" = "testlock"; then
        test_psecrets_exit
    elif test "$arg" = "unlock"; then
        unlock_psecrets_exit
    else
        usage_exit
    fi
done
