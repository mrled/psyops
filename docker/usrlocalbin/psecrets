#!/usr/bin/env python3

"""psecrets: manage PSYOPS secrets"""

import argparse
import getpass
import logging
import os
import pathlib
import shutil
import subprocess
import sys


scriptdir = os.path.dirname(os.path.realpath(__file__))  # pylint: disable=C0103
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] [%(name)s] [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)  # pylint: disable=C0103


# Helpers


class ResolvedPath(str):
    """Resolve a path

    Intended to be passed as a type= option to add_argument()
    (which is why it is a class and not a function)
    """
    def __new__(cls, path):
        return str.__new__(cls, os.path.realpath(os.path.normpath(os.path.expanduser(path))))


def homedir():
    """Find the homedir, crossplatformly"""
    for varname in ["HOME", "USERPROFILE"]:
        home = os.environ.get(varname)
        if home:
            logger.info(f"Found homedir '{home}' from {varname} environment variable")
        return home
    raise Exception(
        "Could not determine home directory - try setting a $HOME or %USERPROFILE% variable")


def idb_excepthook(type, value, tb):
    """Call an interactive debugger in post-mortem mode

    If you do "sys.excepthook = idb_excepthook", then an interactive debugger
    will be spawned at an unhandled exception
    """
    if hasattr(sys, 'ps1') or not sys.stderr.isatty():
        # we are in interactive mode or we don't have a tty-like
        # device, so we call the default hook
        sys.__excepthook__(type, value, tb)
    else:
        import pdb, traceback
        # we are NOT in interactive mode, print the exception...
        traceback.print_exception(type, value, tb)
        print
        # ...then start the debugger in post-mortem mode.
        pdb.pm()


def invoke(command, runner, env=None, cwd=None):
    """Stupid runner that logs for simple cases

    command: A commandline as a string array, like ['ls', '/tmp']
    runner: Something that takes a commandline, such as subprocess.check_call
    env: An optional environment to pass to the command
    cwd: An optional working directory to pass to the command
    """
    logger.info(
        f"Calling command {command} with environment {env} "
        f"from cwd {cwd} via runner {runner}")
    return runner(command, env=env, cwd=cwd)


def pipe(arg_kwarg_list):
    """Construct a shell pipeline

    Invokes the first command in the arglist, retrieves its STDOUT, passes that to the STDIN of the
    next command in the arglist, and so on.

    Logs each command, including its STDIN, STDOUT, and STDERR.

    arg_kwarg_list:     A list of (command, kwargs) tuples
                        command:    A list to pass to subprocess.Popen
                        kwargs:     Any keyword arguments to subprocess.Popen
    result:             The STDOUT of the final command

    Example:

        # Call:
        pipe([
            (['ls', '-1'], {'cwd': '/'}),
            (['head', '-n', '2'], {}),      # Can pass an empty dict...
            (['grep', 'p'],)                # ... or make a one-item tuple with a trailing comma
        # Result (on my Mac):
        Applications
    """
    first = True
    stdin = b""
    for argtuple in arg_kwarg_list:
        if len(argtuple) < 1:
            raise Exception("Found empty tuple")
        if len(argtuple) > 2:
            raise Exception(f"Found tuple with {len(argtuple)} elements")
        command = argtuple[0]
        kwargs = argtuple[1] if len(argtuple) == 2 else {}
        kwargs['stdout'] = subprocess.PIPE
        kwargs['stderr'] = subprocess.PIPE

        if not first:
            kwargs['stdin'] = subprocess.PIPE
        first = False

        process = subprocess.Popen(command, **kwargs)
        stdout, stderr = process.communicate(input=stdin)

        # Don't log stdin/stdout because it may contain binary
        logger.debug(
            f"Popen call {command} with keyword arguments {kwargs} "
            f"exited with code {process.returncode} "
            # f"with a stdin of '{stdin}' "
            # f"and with a stdout of '{stdout}' "
            f"and with a stderr of '{stderr.decode()}'"
        )
        if process.returncode != 0:
            raise subprocess.CalledProcessError(
                process.returncode, command, output=stdout, stderr=stderr)

        stdin = stdout

    return stdout


# Implementation functions


def testgpgsign(keyid):
    """Test whether we can sign a message with a given GPG key
    """
    # Sign the /bin/sh binary; we don't care about the result, just a guaranteed path
    invoke(
        ['gpg', '--sign', '--output', '/dev/null', '--default-key', keyid, '/bin/sh'],
        subprocess.check_call)


def gpgimportkeys(secretkey, publickey, ownertrustdb):
    """ Import GPG keys

    - Will do nothing if the keys already exist
    - Does not require the passphrase to import, only to use after importing
    """
    logger.info(
        f"Attempting to import secret key {secretkey}, public key {publickey}, "
        f"and owner trust database {ownertrustdb}")
    invoke(['gpg', '--batch', '--import', secretkey], subprocess.call)
    invoke(['gpg', '--batch', '--import', publickey], subprocess.call)
    invoke(['gpg', '--batch', '--import-ownertrust', ownertrustdb], subprocess.call)


def decryptsshkey(encryptedkey, decryptedpath, pubkeypath):
    """ Decrypt an SSH key encrypted from a GPG private key

    (NOTE: This is NOT the same as an SSH private key encrypted with ssh-keygen)
    encryptedkey:   Path to encrypted SSH private key
    decryptedpath:  Path to save the decrypted SSH private key
    pubkeypath:     Path to save the public key, which we generate from the private key after
                    decrypting
    """

    logger.info(f"Attempting to decrypt SSH key")

    invoke(
        ['gpg', '--decrypt', '--yes', '--output', decryptedpath, encryptedkey],
        subprocess.check_call)

    # Regenerate the public key from the private key:
    pubkey = invoke(
        ['ssh-keygen', '-y', '-f', decryptedpath], subprocess.check_output)
    with open(pubkeypath, 'w') as pkf:
        pkf.write(pubkey.decode())


def encryptsecrets(decsecrets, encsecrets, recipient):
    """Encrypt secrets

    decsecrets:     A directory containing secrets to encrypt
    encsecrets:     The path to save the resulting GPG-encrypted gzip'ed tarball
    recipient:      The recipient to encrypt for
    """
    logger.info(f"Encrypting secrets")

    stdout = pipe([
        (['tar', '-c'] + os.listdir(decsecrets), {'cwd': decsecrets}),
        (['gzip'], {}),
        (['gpg', '--encrypt', '--recipient', recipient], {})
    ])

    with open(encsecrets, mode='wb') as encsecfile:
        encsecfile.write(stdout)


def decryptsecrets(encsecrets, decsecrets, postdecscript=None):
    """Decrypt secrets

    encsecrets:         Full path to the encrypted secrets file
                        This file should be a .tar.gz.gpg file, encrypted with the PSYOPS GPG key
    decsecrets:         Full path to the decrypted secrets directory
    postdecscript:      A relative path to a script to run after decrypting secrets
    """
    logger.info(f"Attempting to decrypt secrets")
    pathlib.Path(decsecrets).mkdir(parents=True, exist_ok=True)
    pipe([
        (['gpg', '--decrypt', '--yes', encsecrets], {}),
        (['gunzip'], {}),
        (['tar', '-x'], {'cwd': decsecrets})
    ])
    if postdecscript:
        invoke(os.path.join(decsecrets, postdecscript), subprocess.run)


def testsecunlock(checkoutdir, postdecscr):
    """Test whether the secrets repo is unlocked"""
    result = os.path.exists(os.path.join(checkoutdir, postdecscr))
    logger.info(f"Secrets is unlocked: {result}")
    return result


def parseargs(*args, **kwargs):  # pylint: disable=W0613
    """Parse command-line arguments"""

    parser = argparse.ArgumentParser(
        description="Handle PSYOPS secrets")
    subparsers = parser.add_subparsers(dest="action")
    subparsers.required = True

    parser.add_argument(
        "--debug", '-d', action='store_true', help="Include debugging output")

    parser.add_argument(
        '--import-secret-key', dest="gpgseckey",
        type=ResolvedPath, default=os.environ.get("PSYOPS_GPG_IMPORT_SECRET_KEY"),
        help="Path to a secret GPG key to import")
    parser.add_argument(
        '--import-public-key', dest="gpgpubkey",
        type=ResolvedPath, default=os.environ.get("PSYOPS_GPG_IMPORT_PUBLIC_KEY"),
        help="Path to a public GPG key to import")
    parser.add_argument(
        '--import-ownertrust-db', dest="gpgotrust", type=ResolvedPath,
        default=os.environ.get("PSYOPS_GPG_IMPORT_OWNERTRUST_DB"),
        help="Path to a GPG ownertrust database to import")
    parser.add_argument(
        '--gpg-secret-key-id', dest="gpgseckeyid",
        default=os.environ.get("PSYOPS_GPG_SECRET_KEY_ID"),
        help="Key ID for the secret GPG key")
    parser.add_argument(
        '--gpg-public-key-id', dest="gpgpubkeyid",
        default=os.environ.get("PSYOPS_GPG_PUBLIC_KEY_ID"),
        help="Key ID for the public GPG key")

    parser.add_argument(
        '--ssh-ed25519-encrypted-private-key', dest="sshed25519enckey", type=ResolvedPath,
        default=os.environ.get("PSYOPS_SSH_ED25519_ENCRYPTED_PRIVATE_KEY_PATH"),
        help="Location for the SSH ED25519 private key, encrypted with the GPG secret key")
    parser.add_argument(
        '--ssh-ed25519-decrypted-private-key', dest="sshed25519decpath", type=ResolvedPath,
        default=os.environ.get("PSYOPS_SSH_ED25519_DECRYPTED_PRIVATE_KEY_PATH"),
        help="Location to save the plaintext SSH ED25519 private key after decrypting with GPG secret key")
    parser.add_argument(
        '--ssh-ed25519-public-key', dest="sshed25519pubpath", type=ResolvedPath,
        default=os.environ.get("PSYOPS_SSH_ED25519_PUBLIC_KEY_PATH"),
        help="Location to save the SSH ED25519 public key")

    parser.add_argument(
        '--ssh-rsa-encrypted-private-key', dest="sshrsaenckey", type=ResolvedPath,
        default=os.environ.get("PSYOPS_SSH_RSA_ENCRYPTED_PRIVATE_KEY_PATH"),
        help="Location for the SSH RSA private key, encrypted with the GPG secret key")
    parser.add_argument(
        '--ssh-rsa-decrypted-private-key', dest="sshrsadecpath", type=ResolvedPath,
        default=os.environ.get("PSYOPS_SSH_RSA_DECRYPTED_PRIVATE_KEY_PATH"),
        help="Location to save the plaintext SSH RSA private key after decrypting with GPG secret key")
    parser.add_argument(
        '--ssh-rsa-public-key', dest="sshrsapubpath", type=ResolvedPath,
        default=os.environ.get("PSYOPS_SSH_RSA_PUBLIC_KEY_PATH"),
        help="Location to save the SSH RSA public key")

    parser.add_argument(
        '--secrets-encrypted', dest='secretsencpath', type=ResolvedPath,
        default=os.environ.get("PSYOPS_SECRETS_ENCRYPTED_PATH"),
        help="The path to the encrypted secrets file.")
    parser.add_argument(
        '--secrets-decrypt-path', dest='secretsdecpath', type=ResolvedPath,
        default=os.environ.get("PSYOPS_SECRETS_DECRYPTED_PATH"),
        help="The path to a directory to save decrypted secrets")
    parser.add_argument(
        '--secrets-post-decrypt-script', dest='postdecryptscript',
        default=os.environ.get("PSYOPS_SECRETS_POST_DECRYPT_SCRIPT_PATH"),
        help=(
            "The location of a script, relative to the secrets checkout dir, to run after "
            "decrypting. Also used as a test for whether the repo has been decrypted."))

    subparsers.add_parser(
        'unlock', help='Decrypt all secrets, including ssh key and secrets tarfile')

    subparsers.add_parser(
        'encrypt', help="Encrypt the secrets tarfile with the contents from the working secrets path (usually /secrets, set from the PSYOPS_SECRETS_DECRYPTED_PATH variable).")

    subparsers.add_parser(
        'testlock',
        help=(
            "Exit with zero code if the secrets repository unlocked (decrypted), "
            "or nonzero if it is locked (encrypted)"))

    subparsers.add_parser(
        'refreshagent',
        help=(
            "Sign a message with the private GPG key, to refresh the agent TTL "
            "(or to re-prompt for a passphrase if the TTL has expired)."))

    subparsers.add_parser(
        'importgpgkey',
        help=(
            "Import a GPG private key, public key, and owner trust database. "
            "Intended for setting up a new, *unconfigured* GPG instance; "
            "not tested with an existing ~/.gnupg directory."))

    subparsers.add_parser(
        'decryptsshkey',
        help=(
            "Decrypt an SSH key encrypted with the GPG passphrase; "
            "assumes an existing imported private GPG key."))

    return parser.parse_args()


def main(*args, **kwargs):
    """Main program execution"""

    parsed = parseargs(args, kwargs)

    # Configure umask for the rest of the script, including forked processes and file writes
    os.umask(0o0077)

    if parsed.debug:
        sys.excepthook = idb_excepthook
        logger.setLevel(logging.DEBUG)
        logger.info(parsed)

    if parsed.action == "unlock":
        gpgimportkeys(parsed.gpgseckey, parsed.gpgpubkey, parsed.gpgotrust)
        decryptsshkey(parsed.sshed25519enckey, parsed.sshed25519decpath, parsed.sshed25519pubpath)
        decryptsshkey(parsed.sshrsaenckey, parsed.sshrsadecpath, parsed.sshrsapubpath)
        decryptsecrets(
            parsed.secretsencpath, parsed.secretsdecpath, postdecscript=parsed.postdecryptscript)

    elif parsed.action == "encrypt":
        encryptsecrets(parsed.secretsdecpath, parsed.secretsencpath, parsed.gpgpubkeyid)

    elif parsed.action == "testlock":
        # The 'not' turns boolean True=1 and False=0 into expected return codes
        # True=zero and False=nonzero
        return not testsecunlock(parsed.secretsdecpath, parsed.postdecryptscript)

    elif parsed.action == "refreshagent":
        testgpgsign(parsed.gpgseckeyid)

    elif parsed.action == "importgpgkey":
        gpgimportkeys(parsed.gpgseckey, parsed.gpgpubkey, parsed.gpgotrust)

    elif parsed.action == "decryptsshkey":
        decryptsshkey(parsed.sshed25519enckey, parsed.sshed25519decpath, parsed.sshed25519pubpath)
        decryptsshkey(parsed.sshrsaenckey, parsed.sshrsadecpath, parsed.sshrsapubpath)

    else:
        raise Exception(f"No handler for action '{parsed.action}'")


if __name__ == '__main__':
    sys.exit(main(*sys.argv))
