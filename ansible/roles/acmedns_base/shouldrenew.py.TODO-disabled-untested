#!/usr/bin/env python3

"""A wrapper for the lego commandline

Based on inflatable-wharf: https://github.com/mrled/inflatable-wharf
"""

import argparse
import datetime
import logging
import os
import sys

from cryptography import x509
from cryptography.hazmat.backends import default_backend


logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s]\t%(levelname)s:\t%(message)s',
    datefmt='%Y-%m-%d %H:%M:%S')
LOGGER = logging.getLogger(__name__)


def get_cert_expiration(certificate):
    """Get the certificate expiration date as a DateTime object
    """
    with open(certificate, 'rb') as certfile:
        cert_contents = certfile.read()
    cert = x509.load_pem_x509_certificate(cert_contents, default_backend())
    LOGGER.info(f"Certificate {certificate} not valid after {cert.not_valid_after}")
    return cert.not_valid_after


def shouldrun(certificate_path, min_cert_validity=25):
    """Test whether certificates should be requested/renewed

    certificate         Path to a certificate file
    min_cert_validity   If cert exists but is invalid this many days into the future, renew it
    """
    try:
        expires = get_cert_expiration(certificate_path)
        expiresdelta = expires - datetime.datetime.now()
        if expiresdelta.days <= min_cert_validity:
            LOGGER.info(f"Should renew; cert expires in {expiresdelta.days} days")
            return True
        else:
            LOGGER.info(f"Should NOT renew; cert expires in {expiresdelta.days} days")
            return False
    except FileNotFoundError:
        LOGGER.info("Should run; the cert does not exist locally")
        return True


def getcertpath(legodir, domain, filetype):
    """Get the path of a cert file based on its characteristics
    """
    result = os.path.join(legodir, "certificates", f"{domain}.{filetype}")
    LOGGER.debug(f"certpath({legodir}, {domain}, {filetype}) => {result}")
    return result


def main(*args, **kwargs):
    parser = argparse.ArgumentParser()
    parser.add_argument("--legodir")
    parser.add_argument("--domain")
    parser.add_argument("--renewdays", type=int, default=25)
    parser.add_argument("--debug", "-d", action="store_true")
    parser.add_argument("--verbose", "-v", action="store_true")
    parsed = parser.parse_args()
    if parsed.debug or parsed.verbose:
        LOGGER.setLevel(logging.DEBUG)
    certpath = getcertpath(parsed.legodir, parsed.domain, 'crt')
    return shouldrun(certpath, min_cert_validity=parsed.renewdays)


if __name__ == '__main__':
    sys.exit(main(*sys.argv))



