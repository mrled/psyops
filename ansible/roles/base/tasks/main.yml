---

- name: Fix fucking Broadcom wifi on Fedora
  import_tasks: fucking_broadcom_wifi.yml
  when: base_fucking_broadcom_wifi

- name: Install base packages (Ubuntu)
  apt:
    name:
      - cifs-utils     # allow mounting CIFS network filesystems
      - net-tools      # netstat etc
      - python3
      - python3-venv   # fuck this lol
    state: latest
    update_cache: yes
  when: ansible_distribution == "Ubuntu"

- name: Set system hostname to inventory_hostname
  hostname:
    name: "{{ inventory_hostname }}"
  register: base_hostname_result
  when: base_set_system_hostname_to_inventory_hostname
  tags: hostname

- name: Re-gather facts when hostname changes
  action: setup
  when: base_hostname_result.changed
  tags: hostname

# Note that if a machine cannot resolve its short hostname, sudo can be very slow
# https://devtidbits.com/2018/07/26/way-too-slow-sudo/
- name: Add hostname to /etc/hosts
  lineinfile:
    # NOTE:
    # ansible_hostname is a single hostname like 'asdf01' as discovered by ansible
    #    (possibly just set in previous step)
    # ansible_fqdn is the fqdn like 'asdf01.example.com' as discovered by ansible
    # inventory_hostname is the hostname used in the inventory
    # we use ansible_hostname and ansible_fqdn here because these should ALWAYS be resolvable
    # and if base_set_hostname_to_inventory_hostname is set to true
    # these values will be based on whatever inventory_hostname is
    # this means I can set DNS, then run ansible, and the host will have its name configured properly
    line: "127.0.0.254 {{ ansible_hostname }} {{ ansible_fqdn }}"
    regex: '^127\.0\.0\.254.'
    backup: yes
    path: /etc/hosts
  tags: hostname

- name: Configure rpi PoE hat fan (requires manual reboot to take effect)
  lineinfile:
    line: "{{ item.line }}"
    regex: "{{ item.regex }}"
    path: "{{ base_rpi_boot_mount }}/usercfg.txt"
  with_items:
    - { regex: "^dtparam=poe_fan_temp0.*", line: "dtparam=poe_fan_temp0=65000,poe_fan_temp0_hyst=5000" }
    - { regex: "^dtparam=poe_fan_temp1.*", line: "dtparam=poe_fan_temp1=67000,poe_fan_temp1_hyst=2000" }
    - { regex: "^dtparam=poe_fan_temp2.*", line: "dtparam=poe_fan_temp2=69000,poe_fan_temp2_hyst=2000" }
    - { regex: "^dtparam=poe_fan_temp3.*", line: "dtparam=poe_fan_temp3=71000,poe_fan_temp3_hyst=2000" }
  when: base_rpi_poe_hat

- name: Log rpi temperature to the temporal log
  block:
  - name: Copy rpi_log_temperature script
    copy:
      src: rpi_log_temperature.py
      dest: /usr/local/bin/rpi_log_temperature.py
      owner: root
      mode: "0755"
  - name: Install rpi_log_temperature venv
    pip:
      virtualenv: /var/venvs/rpi_log_temperature
      virtualenv_command: python3 -m venv
      name:
        - gpiozero
        - rpi-gpio
  - name: Install rpi_log_temperature cronjob
    vars:
      base_log_rpi_temp_script: sh -c ". /var/venvs/rpi_log_temperature/bin/activate && /usr/local/bin/rpi_log_temperature.py --syslog-server 'syslog.home.micahrl.com' --syslog-port '5515'"
    cron:
      name: "{{ base_log_rpi_temperature_temporal_jobname }}"
      day: "*"
      hour: "*"
      minute: "*"
      job: "{{ base_log_rpi_temp_script }} --no-console-log"
      user: root
      cron_file: "{{ base_log_rpi_temperature_temporal_jobname }}"
  when: base_log_rpi_temperature_temporal
  tags: base_log_rpi_temperature_temporal

- name: Set timezone
  timezone:
    name: "{{ base_timezone }}"
  register: base_set_timezone
  when: base_timezone is defined

- name: Restart cron if timezone changed
  systemd:
    name: cron
    state: restarted
  when: base_set_timezone.changed

