version: "3.7"

services:

  giteaweb:
    image: gitea/gitea:1.15.5
    environment:
      #- USER_UID=1000
      #- USER_GID=1000
      GITEA__database__DB_TYPE: postgres
      GITEA__database__HOST: giteadb:5432
      GITEA__database__NAME: gitea
      GITEA__database__USER: gitea
      GITEA__database__PASSWD: "{{ privnet_giteadb_gitea_password }}"
    networks:
      - cicdnet
    volumes:
      - giteawebdata:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "{{ privnet_git_ssh_port }}:22"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.privnet-giteaweb.rule=Host(`{{ privnet_giteaweb_domain }}`)"
      - "traefik.http.routers.privnet-giteaweb.tls=true"
      - "traefik.http.routers.privnet-giteaweb.tls.certresolver=privnet-resolver"
      - "traefik.http.routers.privnet-giteaweb.service=privnet-giteaweb"
      - "traefik.http.services.privnet-giteaweb.loadbalancer.server.port=3000"

  giteadb:
    image: postgres:13
    environment:
      POSTGRES_USER: gitea
      POSTGRES_PASSWORD: "{{ privnet_giteadb_gitea_password }}"
      POSTGRES_DB: gitea
    networks:
      - cicdnet
    volumes:
      - giteadbdata:/var/lib/postgresql/data

  drone:
    image: drone/drone:2
    environment:
      DRONE_GITEA_SERVER: https://{{ privnet_giteaweb_domain }}
      DRONE_GITEA_CLIENT_ID: "{{ privnet_drone_gitea_client_id }}"
      DRONE_GITEA_CLIENT_SECRET: "{{ privnet_drone_gitea_client_secret }}"
      DRONE_RPC_SECRET: "{{ privnet_drone_rpc_secret }}"
      DRONE_SERVER_HOST: "{{ privnet_drone_domain }}"
      DRONE_SERVER_PROTO: https
    networks:
      - cicdnet
    volumes:
      - dronedata:/data
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network={{ privnet_stack_name }}_cicdnet"
      - "traefik.http.routers.privnet-drone.rule=Host(`{{ privnet_drone_domain }}`)"
      - "traefik.http.routers.privnet-drone.entrypoints=https"
      - "traefik.http.routers.privnet-drone.tls=true"
      - "traefik.http.routers.privnet-drone.tls.certresolver=privnet-resolver"
      - "traefik.http.routers.privnet-drone.service=privnet-drone"
      - "traefik.http.services.privnet-drone.loadbalancer.server.port=80"

  drone-runner:
    image: drone/drone-runner-docker:1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    #ports:
    #  - "3000:3000"
    environment:
      DRONE_RPC_SECRET: "{{ privnet_drone_rpc_secret }}"
      DRONE_SERVER_HOST: drone
      DRONE_SERVER_PROTO: http
      DRONE_RUNNER_CAPACITY: "2"
      DRONE_RUNNER_NAME: "runner"
    deploy:
      # This must be an integer; should not be quoted
      replicas: {{ privnet_drone_replica_count }}

  whoami:
    image: containous/whoami:latest
    networks:
      - cicdnet
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network={{ privnet_stack_name }}_cicdnet"
      - "traefik.http.routers.privnet-whoami.rule=Host(`{{ privnet_whoami_domain }}`)"
      - "traefik.http.routers.privnet-whoami.entrypoints=https"
      - "traefik.http.routers.privnet-whoami.tls=true"
      - "traefik.http.routers.privnet-whoami.tls.certresolver=privnet-resolver"
      - "traefik.http.routers.privnet-whoami.service=privnet-whoami"
      - "traefik.http.services.privnet-whoami.loadbalancer.server.port=80"

  balancer:
    image: traefik:2.5
    command: --web --docker --docker.swarmMode --docker.watch --docker.domain={{ privnet_balancer_domain }} --logLevel=DEBUG
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
      - "8080:8080/tcp"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - "{{ privnet_traefik_config_file }}:/traefik.yml:ro"
      - "{{ privnet_traefik_acme_json }}:/acme.json"
      - "{{ privnet_traefik_aws_creds_file }}:/root/.aws/credentials"
    environment:
      - AWS_REGION={{ privnet_acme_aws_region }}
      - AWS_HOSTED_ZONE_ID={{ privnet_acme_aws_zone }}
    labels:
      # Dashboard
      # WARNING: A TRAILING SLASH IS MANDATORY IN THE BROWSER
      # e.g. https://example.com/dashboard/, not merely /dashboard
      - "traefik.http.routers.privnet-traefik-api.rule=Host(`{{ privnet_balancer_domain }}`)&&(PathPrefix(`/api`)||PathPrefix(`/dashboard`)||PathPrefix(`/debug`))"
      - "traefik.http.routers.privnet-traefik-api.service=api@internal"
      - "traefik.http.routers.privnet-traefik-api.tls.certresolver=privnet-resolver"
      - "traefik.http.routers.privnet-traefik-api.entrypoints=https"

      # global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # Without this, traefik can get confused and forward traffic to wrong IPs
      # https://community.traefik.io/t/traefik-routes-to-the-wrong-http-service-ip/5076
      #- "traefik.docker.network={{ privnet_stack_name }}_cicdnet"

    networks:
      - cicdnet
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager

volumes:
  giteawebdata:
    driver: local
  giteadbdata:
    driver: local
  dronedata:
    driver: local

networks:
  cicdnet:
    driver: overlay
