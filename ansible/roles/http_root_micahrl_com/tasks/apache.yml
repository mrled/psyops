---

- name: Install packages
  package:
    name:
      - apache2
      - libapache2-mod-wsgi-py3
      - python3-certbot-apache
    state: latest
    update_cache: yes

- name: Check for lets encrypt config file
  stat:
    path: /etc/letsencrypt/options-ssl-apache.conf
  register: letsencrypt_config

# If we don't do this, apache2 will not validate the config file (apachectl configtest),
# which is required for enabling modules.
- name: Create empty letsencrypt config file if it doesn't exist
  copy:
    content: ""
    dest: /etc/letsencrypt/options-ssl-apache.conf
    owner: root
    group: root
    mode: "0644"
  when: letsencrypt_config.stat.exists == False

- name: Enable Apache modules
  apache2_module:
    state: present
    name: "{{ item }}"
  with_items:
    - headers
    - http
    - proxy
    - proxy_http
    - rewrite
    - ssl
    - wsgi

- name: Install global Let's Encrypt config
  copy:
    src: 100-letsencrypt.conf
    dest: /etc/apache2/sites-available/100-letsencrypt.conf
    owner: root
    group: root
    mode: "0644"
  register: http_root_micahrl_com_install_letsencrypt
  tags: apache_conf

- name: Enable Let's Encrypt config
  file:
    state: link
    src: ../sites-available/100-letsencrypt.conf
    dest: /etc/apache2/sites-enabled/100-letsencrypt.conf
  register: http_root_micahrl_com_enable_letsencrypt
  tags: apache_conf

- name: Install micahrl.com site config
  template:
    src: micahrl.com.conf.j2
    dest: /etc/apache2/sites-available/micahrl.com.conf
    owner: root
    group: root
    mode: "0644"
  register: http_root_micahrl_com_install_site
  tags: apache_conf

- name: Enable micahrl.com site
  file:
    state: link
    src: ../sites-available/micahrl.com.conf
    dest: /etc/apache2/sites-enabled/micahrl.com.conf
  register: http_root_micahrl_com_enable_site
  tags: apache_conf

# Will need to temp disable this when deploying on a new server that doesn't have cert yet
- name: Test config file
  command: apachectl configtest
  changed_when: false
  tags: apache_conf

- name: Restart apache
  systemd:
    name: apache2
    state: restarted
  when: http_root_micahrl_com_install_site.changed or http_root_micahrl_com_enable_site.changed or http_root_micahrl_com_install_letsencrypt.changed or http_root_micahrl_com_enable_letsencrypt.changed
  tags: apache_conf

- name: Start apache
  systemd:
    name: apache2
    state: started
    enabled: yes

- name: Create /etc/letsencrypt
  file:
    path: /etc/letsencrypt
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Create .well-known dir
  file:
    path: /var/www/html/.well-known
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Install nostr NIP-05 verification file
  copy:
    content: |+
      {
        "names": {
          "_": "{{ http_root_micahrl_com_nostr_hex_pub_key }}"
        }
      }
    dest: /var/www/html/.well-known/nostr.json
    owner: root
    group: root
    mode: "0644"

- name: Create acme-challenge dir
  file:
    path: /var/www/letsencrypt/.well-known/acme-challenge
    state: directory
    owner: root
    group: root
    mode: "0755"

# Useful for testing with e.g. 'curl http://micahrl.com/.well-known/acme-challenge/test.txt'
# to make sure all your apache rules are working before running certbot
- name: Install test file into acme-challenge dir
  copy:
    content: "hello ACME"
    dest: /var/www/letsencrypt/.well-known/acme-challenge/test.txt
    owner: root
    group: root
    mode: "0644"

# This can be easily run from SSH as well
- name: Create certbot wrapper
  copy:
    content: >+
      certbot certonly
      --noninteractive
      --agree-tos
      --webroot
      --webroot-path /var/www/letsencrypt
      --keep-until-expiring
      --redirect
      --hsts
      --uir
      --renew-hook "apachectl graceful"
      --cert-name {{ http_root_micahrl_com_certname }}
      --email {{ http_root_micahrl_com_email }}
      --domains {{ http_root_micahrl_com_certbot_domain_list | join(',') }}
      $*
    dest: /usr/local/bin/certbot_{{ http_root_micahrl_com_certname }}.sh
    owner: root
    group: root
    mode: "0755"
  tags: certbot

# Running certbot here does a few things for us:
# 1) If the cert doen't exist or is expired, it'll get us a valid cert
# 2) It'll add RewriteCond entries to the port 80 vhost to redirect to HTTPS
#    (which means we always have to run certbot after installing the config file)
# 3) It'll set up the cert to be renewed automatically in cron
- name: Run certbot once
  shell: /usr/local/bin/certbot_{{ http_root_micahrl_com_certname }}.sh
  tags: certbot

# Note that the Debian certbot package configures a systemd timer so we don't have to cron it
