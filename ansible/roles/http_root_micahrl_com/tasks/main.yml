---

- name: Install packages
  package:
    name:
      - apache2
      - python3-certbot-apache
    state: latest
    update_cache: yes

- name: Enable Apache modules
  apache2_module:
    state: present
    name: "{{ item }}"
  with_items:
    - proxy
    - rewrite

- name: Install micahrl.com site config
  template:
    src: micahrl.com.conf.j2
    dest: /etc/apache2/sites-available/micahrl.com.conf
    owner: root
    group: root
    mode: "0644"
  register: http_root_micahrl_com_install_site

- name: Enable micahrl.com site
  file:
    state: link
    src: ../sites-available/micahrl.com.conf
    dest: /etc/apache2/sites-enabled/micahrl.com.conf
  register: http_root_micahrl_com_enable_site

- name: Test config file
  command: apachectl configtest
  changed_when: false

- name: Restart apache
  systemd:
    name: apache2
    state: restarted
  when: http_root_micahrl_com_install_site.changed or http_root_micahrl_com_enable_site.changed

- name: Start apache
  systemd:
    name: apache2
    state: started
    enabled: yes

- name: Create /etc/letsencrypt
  file:
    path: /etc/letsencrypt
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Create /var/www/letsencrypt
  file:
    path: /var/www/letsencrypt/.well-known/acme-challenge
    state: directory
    owner: root
    group: root
    mode: "0755"

# This can be easily run from SSH as well
- name: Create certbot wrapper
  copy:
    content: >+
      certbot certonly
      --noninteractive
      --agree-tos
      --webroot
      --webroot-path /var/www/letsencrypt
      --keep-until-expiring
      --redirect
      --hsts
      --uir
      --renew-hook "apachectl graceful"
      --cert-name {{ http_root_micahrl_com_certname }}
      --email {{ http_root_micahrl_com_email }}
      --domains abraxas.micahrl.com
      $*
    #  --domains {{ http_root_micahrl_com_domain_list | join(',') }}
    dest: /usr/local/bin/certbot_{{ http_root_micahrl_com_certname }}.sh
    owner: root
    group: root
    mode: "0755"

# Running certbot here does two things for us:
# 1) If the cert doen't exist or is expired, it'll get us a valid cert
# 2) It'll add RewriteCond entries to the port 80 vhost to redirect to HTTPS
#    (which means we always have to run certbot after installing the config file)
- name: Run certbot once
  shell: /usr/local/bin/certbot_{{ http_root_micahrl_com_certname }}.sh

- name: Cron certbot
  cron:
    name: certbot_{{ http_root_micahrl_com_certname }}
    cron_file: certbot_{{ http_root_micahrl_com_certname }}
    job: /usr/local/bin/certbot_{{ http_root_micahrl_com_certname }}.sh
    user: root
    minute: '22'
    hour: '4'
    day: "*/14"
