#!/bin/sh
set -eu
user_map_file="{{ chineseroom_user_map_file }}"
domain="{{ chineseroom_domain }}"
processed_map_file="{{ chineseroom_nginx_conf_dir }}/user-maps.conf"
letsencrypt_base="{{ chineseroom_letsencrypt_base }}"
reservered_port_max="{{ chineseroom_system_reserved_port_max }}"

if ! test -e "$user_map_file"; then
    echo "User map file does not exist: $user_map_file" >&2
    exit 1
fi

if ! test "$domain"; then
    echo "Domain variable is not set or empty: $domain" >&2
    exit 1
fi

case "$reservered_port_max" in
  ''|*[!0-9]*) echo "DANGER: chineseroom_system_reserved_port_max is an int"; exit 1 ;;
esac


echo "# autogenerated by regenerate-mappings.sh" > "$processed_map_file"

while IFS= read -r line; do
    # Ignore empty lines and comments
    case "$line" in
        ''|'#'*) continue ;;
    esac

    # Split line into domain and port
    set -- $line
    subdomain=$1
    port=$2

    # Validate subdomain: only lowercase letters, digits, dashes
    case "$subdomain" in
        *[!a-z0-9-]*|'')
            echo "Skipping invalid subdomain on line: $line" >&2
            continue
            ;;
    esac

    # Validate port: must be all digits and in valid range
    case "$port" in
        ''|*[!0-9]*)
            echo "Skipping invalid port on line: $line" >&2
            continue
            ;;
    esac
    if [ "$port" -lt "$reservered_port_max" ] || [ "$port" -gt 65535 ]; then
        echo "Skipping out-of-range port: $port" >&2
        continue
    fi

    cat >>$processed_map_file <<ENDCONF
server {
    listen 443 ssl;
    server_name $subdomain.$domain;
    ssl_certificate     $letsencrypt_base/live/$domain/fullchain.pem;
    ssl_certificate_key $letsencrypt_base/live/$domain/privkey.pem;
    location / {
        proxy_pass http://127.0.0.1:$port;
    }
}
ENDCONF
done < "$user_map_file"

nginx -t && systemctl reload nginx
