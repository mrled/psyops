#!/bin/sh
set -eu

DOMAIN="chineseroom.micahrl.com"
trappeduser=callista
WILDCARD="*.$DOMAIN"
DNS_PLUGIN="dns-route53"
CERTBOT_PLUGIN_PKG="python3-certbot-$DNS_PLUGIN"
user_map_file="/home/$trappeduser/domainmap.txt"


if [ "$(id -u)" -ne 0 ]; then
  echo "This script must be run as root." >&2
  exit 1
fi

# Require creds and config already in place.
# Certbot uses the root credentials, no way to specify creds just for certbot.
# The region doesn't matter because route53 is global,
# but it must be set or certbot might throw an error.
if ! test -e /root/.aws/credentials; then
    cat <<EOF
Must populate /root/.aws/credentials with:

[default]
aws_access_key_id = AWS_ACCESS_KEY_ID
aws_secret_access_key = AWS_SECRET_ACCESS_KEY

And you also must have a region set in /root/.aws/config like:

[default]
region = us-east-1
EOF
    exit 1
fi

# Prereqs
echo "Installing prerequisites..."
dnf install -y nginx certbot "$CERTBOT_PLUGIN_PKG"

# Ensure nginx is enabled and running
systemctl enable nginx
systemctl start nginx

# IAM credentials for route53 must be available to certbot:
# - Either via ~/.aws/credentials with proper permissions
# - Or via environment variables or EC2 instance role
# No separate credentials file needed by certbot-dns-route53

# Request certificate if not already issued
CERT_PATH="/etc/letsencrypt/live/$DOMAIN/fullchain.pem"
if [ ! -f "$CERT_PATH" ]; then
    echo "Requesting Let's Encrypt certificate using Route53..."
    certbot certonly \
        --non-interactive \
        --agree-tos \
        --email admin@$DOMAIN \
        --dns-route53 \
        -d "$DOMAIN" -d "$WILDCARD"
fi

# Configure http->https redirect,
# and configure the main domain to serve static content.
NGINX_CONF="/etc/nginx/conf.d/$DOMAIN.conf"
cat > "$NGINX_CONF" <<EOF
server {
    listen 80;
    server_name $DOMAIN *.$DOMAIN;
    location / {
        return 301 https://\$host\$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name $DOMAIN;

    ssl_certificate     /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;

    location / {
        root /usr/share/nginx/html;
        index index.html;
    }
}
EOF
nginx -t && systemctl reload nginx

# Set up deploy hook to reload nginx
HOOK_PATH="/etc/letsencrypt/renewal-hooks/deploy/reload-nginx.sh"
mkdir -p "$(dirname "$HOOK_PATH")"
cat > "$HOOK_PATH" <<EOF
#!/bin/sh
systemctl reload nginx
EOF
    chmod +x "$HOOK_PATH"

# Enabling http and https in the firewall
firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-service=https
firewall-cmd --reload

# Make selinux allow nginx to connec to any port on localhost
sudo setsebool -P httpd_can_network_connect 1

mkdir -p /usr/local/bin
# Write the top part of the regeneration script
# Do NOT quote ENDSCRIPT, so that the variables are expanded
cat > /usr/local/bin/regen-nginx-mappings.sh <<ENDSCRIPT
#!/bin/sh
set -eu
user_map_file="$user_map_file"
DOMAIN="$DOMAIN"
ENDSCRIPT

# Write the rest of the regeneration script
# Quote ENDSCRIPT to prevent variable expansion
cat >> /usr/local/bin/regen-nginx-mappings.sh <<'ENDSCRIPT'
processed_map_file="/etc/nginx/conf.d/user-maps.conf"

echo "# autogenerated by regenerate-mappings.sh" > "$processed_map_file"

if ! test -e "$user_map_file"; then
    echo "User map file does not exist: $user_map_file" >&2
    exit 1
fi

while IFS= read -r line; do
    # Ignore empty lines and comments
    case "$line" in
        ''|'#'*) continue ;;
    esac

    # Split line into domain and port
    set -- $line
    subdomain=$1
    port=$2

    # Validate subdomain: only lowercase letters, digits, dashes
    case "$subdomain" in
        *[!a-z0-9-]*|'')
            echo "Skipping invalid subdomain on line: $line" >&2
            continue
            ;;
    esac

    # Validate port: must be all digits and in valid range
    case "$port" in
        ''|*[!0-9]*)
            echo "Skipping invalid port on line: $line" >&2
            continue
            ;;
    esac
    if [ "$port" -lt 1024 ] || [ "$port" -gt 65535 ]; then
        echo "Skipping out-of-range port: $port" >&2
        continue
    fi

    cat >>$processed_map_file <<ENDCONF
server {
    listen 443 ssl;
    server_name $subdomain.$DOMAIN;
    ssl_certificate     /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
    location / {
        proxy_pass http://127.0.0.1:$port;
    }
}
ENDCONF
done < "$user_map_file"

nginx -t && systemctl reload nginx
ENDSCRIPT

chmod 755 /usr/local/bin/regen-nginx-mappings.sh

# Allow trapped user to run the script via sudo
echo "$trappeduser ALL=(ALL) NOPASSWD: /usr/local/bin/regen-nginx-mappings.sh" > /etc/sudoers.d/regen-nginx-mappings

# Run the mappings regeneration script once
/usr/local/bin/regen-nginx-mappings.sh

echo "Setup complete."
