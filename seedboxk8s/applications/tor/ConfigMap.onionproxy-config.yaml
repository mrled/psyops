apiVersion: v1
kind: ConfigMap
metadata:
  name: onionproxy-config
  namespace: tor
data:
  nginx.conf: |+
    user nginx;
    worker_processes auto;
    pid /run/nginx.pid;

    error_log /dev/stderr warn;

    events {
        worker_connections 1024;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /dev/stdout main;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;


        # Requests to the bare domain should return a static page with an explanation
        server {
            listen 80;
            server_name onionproxy.tor.svc.cluster.local;
            server_name onion.${clusterFqdn};
            location / {
                root /html;
                index index.html;
            }
        }

        # Requests to the subdomains should be proxied through privoxy/tor
        server {
            listen 80;

            server_name ~^(?<onion1>[^.]+)\.onionproxy\.tor\.svc\.cluster\.local$;
            server_name ~^(?<onion2>[^.]+)\.onion.${clusterFqdn}$;

            location / {
                resolver 127.0.0.11; # Default DNS resolver provided by Kubernetes

                # Determine the target based on the server name
                if ($host ~* ^(?<onion1>.*)) {
                    set $target_host $onion1.onion;
                }
                if ($host ~* ^(?<onion2>.*)) {
                    set $target_host $onion2.onion;
                }

                # Forward requests to Privoxy, which forwards them to the Tor SOCKS proxy
                proxy_pass http://torprivoxy.tor.svc.cluster.local:8118;
                proxy_set_header Host $target_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                proxy_connect_timeout 60s;
                proxy_read_timeout 60s;
                proxy_send_timeout 60s;

                # Additional headers for security and debugging
                add_header X-Proxied-By "onionproxy" always;
            }
        }
    }


  index.html: |+
    <!DOCTYPE html>
    <html>
    <head>
    <title>Unsafe Onion Proxy</title>
    <style>
    html { color-scheme: light dark; }
    body { width: 35em; margin: 0 auto;
    font-family: Tahoma, Verdana, Arial, sans-serif; }
    </style>
    </head>
    <body>
    <h1>Welcome to the unsafe onion proxy!</h1>
    <p>This domain can be used to transparently visit Tor sites. However, it does NOT rewrite URLs in HTML, meaning that any full URL with http://whatever.onion... will not work. <em>It is not safe to visit these in a browser</em> unless the browser's user is ok with their identity being leaked to Tor sites (and their Tor activity leaked to malicious sites). It's intended for programmatic use like for z-library.</p>
    </body>
    </html>

