apiVersion: apps/v1
kind: Deployment
metadata:
  name: sabnzbd
  namespace: sabnzbd
  annotations:

    seedboxk8s-import-data-comment: |+
      Some notes about importing data for the first time.

      The import-data initContainer waits until the config volume contains a file called import-data-complete.
      Add data to it with a simple function like this:

      doimport() {
        applabel="$1"
        namespace="$1"
        tarball="$3"
        container="$(kubectl get pods -n "$namespace" -l app="$applabel" -o jsonpath='{.items[*].metadata.name}')"
        if test -z "$container"; then
          echo "Could not find any containers in namespace '$namespace' with app label '$applabel'"
          return 1
        elif test "${container}" != "${container% *}"; then
          echo "Multiple containers in namespace '$namespace' match the app label '$applabel' (maybe an old deployment?): $container"
          return 1
        else
          kubectl cp -n "$namespace" "$tarball" $container:/import/import.tar.gz -c import-data
          kubectl exec -n "$namespace" $container -c import-data -- touch /import/import-data-ready
        fi
      }

      Copy that into an interactive shell and run it like this:

      doimport sabnzbd sabnzbd /path/to/sabnzbd.tar.gz

      You can also use a script like this to reset import state (just deleting the import-data-complete file):

      resetimport() {
        applabel="$1"
        namespace="$1"
        container="$(kubectl get pods -n "$namespace" -l app="$applabel" -o jsonpath='{.items[*].metadata.name}')"
        for c in $container; do
          kubectl exec -n "$namespace" $c -c import-data -- rm -f /import/import-data-complete
        done
      }

      After that, you'll need to delete the pod to force the initContainer to run again.
      You may wish to just delete the entire deployment, wait a second, and reapply the deployment manifest.

spec:
  replicas: 1
  selector:
    matchLabels:
      app: sabnzbd
  template:
    metadata:
      labels:
        app: sabnzbd
    spec:
      initContainers:
        - name: import-data
          image: busybox
          command:
            - sh
            - -c
            # BE VERY CAREFUL WITH TRAILING SEMICOLONS
            - >
              if test "$DANGER_CLEAR_EXISTING_DATA" = "true"; then
                for f in /config/{*,.*}; do
                  if test "$f" = "/config/." || test "$f" = "/config/.."; then
                    continue;
                  fi;
                  echo "Removing $f recursively...";
                  rm -f "$f";
                done;
                rm -rf /config/*;
              elif test -f /config/import-data-complete; then
                exit 0;
              fi;
              while test ! -f /import/import-data-ready; do
                sleep 1;
              done;
              echo "Extracting data...";
              tar -xvf /import/import.tar.gz -C /config;
              echo "Extraction complete.";
              touch /config/import-data-complete;
              exit 0;
          env:
            - name: DANGER_CLEAR_EXISTING_DATA
              value: "false"
            - name: PUID
              value: ${plexUid}
            - name: PGID
              value: ${plexGid}
          volumeMounts:
            - name: sabnzbd-config-pvc
              mountPath: /config
            - name: import
              mountPath: /import
      containers:
        - image: linuxserver/sabnzbd
          name: sabnzbd
          ports:
            - containerPort: 8080
          env:
            - name: PUID
              value: ${plexUid}
            - name: PGID
              value: ${plexGid}
            - name: TZ
              value: ${timezone}
          volumeMounts:
            - mountPath: /config
              name: sabnzbd-config-pvc
              readOnly: false
            - mountPath: /media
              name: seedboxmedia-nfs
              readOnly: false
      volumes:
        - name: import
          emptyDir: {}
        - name: sabnzbd-config-pvc
          persistentVolumeClaim:
            claimName: sabnzbd-config-pvc
        - name: seedboxmedia-nfs
          persistentVolumeClaim:
            claimName: seedboxmedia-nfs-sabnzbd-pvc
