apiVersion: v1
kind: ConfigMap
metadata:
  name: data-import-helper
  namespace: seedboxutil
  annotations:
    reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
    reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: >-
      clustergit,
      registry,
      tortuga,
    reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
    reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: ""

data:

  ## WARNING: Reminder to be careful of ${var...} here (and everywhere), which is interpreted by Flux Kustomize. Escape with $${var...}.

  import-data.sh: |+
    #!/bin/sh
    set -e

    DANGER_CLEAR_EXISTING_DATA="$${DANGER_CLEAR_EXISTING_DATA:-false}"
    SOURCE_MOUNT_PATH="$${SOURCE_MOUNT_PATH:-/import}"
    DESTINATION_MOUNT_PATH="$${DESTINATION_MOUNT_PATH:-/config}"
    set -u

    importfile="$SOURCE_MOUNT_PATH/import.tar.gz"
    readyfile="$SOURCE_MOUNT_PATH/import-data-ready"
    completefile="$DESTINATION_MOUNT_PATH/import-data-complete"

    if test "$DANGER_CLEAR_EXISTING_DATA" = "true"; then
      echo "DANGEROUS_CLEAR_EXISTING_DATA is set to true. Clearing existing data..."
      rm -rf "$DESTINATION_MOUNT_PATH"/{*,.*}

    elif test -f $completefile; then
      echo "Found file at $completefile, indicating data has already been imported. Exiting..."
      exit 0
    fi

    echo "Hello and welcome to the data import helper script."
    echo "This script is intended to be run as an initContainer in a StatefulSet that requires manual data import in a fresh PVC. It can also be used for pods that are migrating into this cluster for the first time or being restored from a backup."
    echo ""
    echo "Waiting indefinitely for data to be ready; copy a tarball to $importfile and then touch $readyfile to signal readiness. Alternatively, import the data manually and touch $completefile to skip this process. You can control the source and destination paths with the SOURCE_MOUNT_PATH and DESTINATION_MOUNT_PATH environment variables.
    while true; do
      if test -f $readyfile; then
        echo "Extracting data..."
        tar -xvf "$importfile" -C "$DESTINATION_MOUNT_PATH"
        echo "Extraction complete."
        touch "$completefile"
        exit 0
      elif test -f "$completefile"; then
        echo "Found file at $completefile, indicating data has been imported manually. Exiting..."
        exit 0
      fi
      sleep 1
    done
