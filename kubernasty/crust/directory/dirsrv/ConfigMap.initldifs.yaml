apiVersion: v1
kind: ConfigMap
metadata:
  name: initldifs
  namespace: directory
data:
  # Don't set passwords here.
  # Place passwords in initsecrets Secret,
  # where a separate script will apply them after creating users/services.

  # They are designed to be applied in order:
  # * The init* LDIFs are applied when the backend is originally set up,
  #   and may expect a certain order.
  #   They are not saved in the ldifMarkers OU.
  # * service*, user*, group*, and membership* LDIFs are first checked
  #   to see if they have been applied before,
  #   by looking for an entry in the ldifMarkers OU.
  # * service*, user*, and group* LDIFs may be applied in any order
  #   and do not depend on each other.
  # * membership* LDIFs must be applied at the end,
  #   after their corresponding groups and services/users have been created.
  #
  # A few notes:
  # * We use objectClass: account for all service accounts
  # * objectClass: inetOrgPerson requires uid/cn/sn
  # * objectClass: posixAccount requires uidNumber/gidNumber/homeDirectory/loginShell/gecos
  # * For an object to support a password, it needs to have an objectClass that supports this,
  #   like inetOrgPerson/organizationalPerson/person; account is not enough.
  #   So we make service accounts also be inetOrgPerson.
  # * Do not put memberUid: ... in group* LDIFs; use membership* LDIFs instead
  # * We put objectClass: top in all LDIFs, apparently this is best practice?
  # * Be careful of blank lines; a blank line indicates a separate LDIF document in the same file.
  # * LDAP group membership is tricky.
  #   We use `member` for LDAP `objectClass: groupOfNames` membership,
  #   and `memberUid` for POSIX `objectClass: posixGroup` membership.
  #   `member` expects a full DN, while `memberUid` expects just the uid.
  #   For a group to be used both ways, it must have both object classes applied,
  #   and both types of membership attributes present.
  # * Speaking of group membership, by default, there is no way to filter for group members;
  #   we enable the MemberOf plugin to allow this.
  #   It only works for LDAP groups, not POSIX groups.
  # * When defining groups, we use cn= for the Relative Distinguished Name
  #   (the first component of the DN),
  #   and the same value must also be provided as a cn attribute.
  #   User entries specify a user's full name in the cn attribute,
  #   which is different from the uid RDN, but groups don't work this way
  #   because the cn is the RDN.
  #
  # About the ldifMarkers OU:
  # * It will contain one organizationalRole for each LDIF file that has been applied.
  # * We use organizationalRole because it has a cn and a description,
  #   it's standard, and doesn't require anything else.
  #   It would be nice to have a dedicated type for this, but that requires a schema modification.
  #   TODO: Consider using a custom objectClass for ldifMarkers.
  #
  # You can add LDIFs here and apply them without restarting the directory server.
  # * Create the LDIF here
  # * Apply the ConfigMap to Kubernetes with `kubectl apply -f ConfigMap.initldifs.yaml`
  # * Wait for it to be applied...
  #   there is no good way to test this so you can just cat the file from the sidecar like
  #   `kubectl exec -it -n directory dirsrv-0 -c configurator -- cat /initldifs/<YOUR NEW FILE>.ldif`
  # * Run the LDIF apply script like
  #   `kubectl exec -it -n directory dirsrv-0 -c configurator -- /initsetup/apply_ldifs.sh`

  init.ldifMarkers.ldif: |+
    dn: ou=ldifMarkers,dc=micahrl,dc=me
    objectClass: organizationalUnit
    objectClass: top
    ou: ldifMarkers
    description: A list of all the LDIF files that have been applied.

  init.removeDefaultJunk.ldif: |+
    dn: uid=demo_user,ou=people,dc=micahrl,dc=me
    changetype: delete

    dn: cn=demo_group,ou=Groups,dc=micahrl,dc=me
    changetype: delete

  # Automatically add a memberOf attribute to each user entry for each group they are a member of.
  # Without this, you can't search for users by group membership. (lol)
  # This is done only for LDAP `member` attributes, not POSIX `memberUid` attributes.
  # (If necessary, make users both `member: ...` and `memberUid: ...` of the same group.)
  init.enableMemberOf.ldif: |+
    dn: cn=MemberOf Plugin,cn=plugins,cn=config
    changetype: modify
    replace: nsslapd-pluginEnabled
    nsslapd-pluginEnabled: on

  # TODO: this is idempotent, maybe I need a way to write idempotent LDIFs that get applied every time?
  config.accessLog.ldif: |+
    dn: cn=config
    changetype: modify
    replace: nsslapd-accesslog-level
    nsslapd-accesslog-level: 256
    -
    replace: nsslapd-accesslog-logging-enabled
    nsslapd-accesslog-logging-enabled: on
    -
    replace: nsslapd-accesslog
    nsslapd-accesslog: /var/log/dirsrv/access.log
    -
    replace: nsslapd-accesslog-maxlogsize
    # It is rotated if it reaches this size in MB
    nsslapd-accesslog-maxlogsize: 10
    -
    replace: nsslapd-accesslog-maxlogsperdir
    nsslapd-accesslog-maxlogsperdir: 2
    -
    replace: nsslapd-accesslog-logbuffering
    nsslapd-accesslog-logbuffering: off

  # TODO: arguably the permissions should be set at the group level
  # Note that the userdn specified here does not need to exist yet
  config.autheliaReadAllObjectsAci.ldif: |+
    dn: dc=micahrl,dc=me
    changetype: modify
    add: aci
    aci: (targetattr="*")(version 3.0; acl "Allow read access to authelia"; allow (read, search, compare) userdn="ldap:///uid=authelia,ou=services,dc=micahrl,dc=me";)


  service.authenticator.ldif: |+
    dn: uid=authenticator,ou=services,dc=micahrl,dc=me
    objectClass: inetOrgPerson
    objectClass: account
    objectClass: top
    uid: authenticator
    cn: Authenticator
    sn: authrenticator
    description: A service account for authenticating users

  service.ldapAccountManager.ldif: |+
    dn: uid=ldapAccountManager,ou=services,dc=micahrl,dc=me
    objectClass: inetOrgPerson
    objectClass: account
    objectClass: top
    uid: ldapAccountManager
    cn: LDAP Account Manager
    sn: ldapAccountManager

  service.authelia.ldif: |+
    dn: uid=authelia,ou=services,dc=micahrl,dc=me
    objectClass: inetOrgPerson
    objectClass: account
    objectClass: top
    uid: authelia
    cn: Authelia
    sn: authelia

  user.mrladmin.ldif: |+
    dn: uid=mrladmin,ou=people,dc=micahrl,dc=me
    objectClass: inetOrgPerson
    objectClass: posixAccount
    objectClass: top
    uid: mrladmin
    cn: Micah R Ledbetter (Admin)
    givenName: Micah
    sn: Ledbetter
    mail: mrladmin@micahrl.me
    uidNumber: 10420
    gidNumber: 10100
    homeDirectory: /home/mrladmin
    loginShell: /bin/sh
    gecos: Micah R Ledbetter (Admin)

  user.micahrl.ldif: |+
    dn: uid=micahrl,ou=people,dc=micahrl,dc=me
    objectClass: inetOrgPerson
    objectClass: posixAccount
    objectClass: top
    uid: micahrl
    cn: Micah R Ledbetter
    givenName: Micah
    sn: Ledbetter
    mail: me@micahrl.com
    uidNumber: 10069
    gidNumber: 10101
    homeDirectory: /home/micahrl
    loginShell: /bin/zsh
    gecos: Micah R Ledbetter

  group.patricii.ldif: |+
    dn: cn=patricii,ou=groups,dc=micahrl,dc=me
    objectClass: groupOfNames
    objectClass: posixGroup
    objectClass: top
    cn: patricii
    description: Accounts with administrative privileges
    gidNumber: 10100

  group.proletarii.ldif: |+
    dn: cn=proletarii,ou=groups,dc=micahrl,dc=me
    objectClass: groupOfNames
    objectClass: posixGroup
    objectClass: top
    cn: proletarii
    description: Regular user accounts
    gidNumber: 10101

  group.servi.ldif: |+
    dn: cn=servi,ou=groups,dc=micahrl,dc=me
    objectClass: groupOfNames
    objectClass: posixGroup
    objectClass: top
    cn: servi
    description: Service accounts
    gidNumber: 10102

  group.totalgits.ldif: |+
    dn: cn=totalgits,ou=groups,dc=micahrl,dc=me
    objectClass: groupOfNames
    objectClass: top
    cn: totalgits
    description: Users that can log in to the Git server

  membership.patricii.mrladmin.ldif: |+
    dn: cn=patricii,ou=groups,dc=micahrl,dc=me
    changetype: modify
    add: memberUid
    memberUid: mrladmin
    -
    add: member
    member: uid=mrladmin,ou=people,dc=micahrl,dc=me

  membership.proletarii.micahrl.ldif: |+
    dn: cn=proletarii,ou=groups,dc=micahrl,dc=me
    changetype: modify
    add: memberUid
    memberUid: micahrl
    -
    add: member
    member: uid=micahrl,ou=people,dc=micahrl,dc=me

  membership.servi.ldapAccountManager.ldif: |+
    dn: cn=servi,ou=groups,dc=micahrl,dc=me
    changetype: modify
    add: memberUid
    memberUid: ldapAccountManager
    -
    add: member
    member: uid=ldapAccountManager,ou=services,dc=micahrl,dc=me

  membership.totalgits.mrladmin.ldif: |+
    dn: cn=totalgits,ou=groups,dc=micahrl,dc=me
    changetype: modify
    add: member
    member: uid=mrladmin,ou=people,dc=micahrl,dc=me

  membership.totalgits.micahrl.ldif: |+
    dn: cn=totalgits,ou=groups,dc=micahrl,dc=me
    changetype: modify
    add: member
    member: uid=micahrl,ou=people,dc=micahrl,dc=me

  #### datadump
  #
  group.datadump-connect.ldif: |+
    dn: cn=datadump-connect,ou=groups,dc=micahrl,dc=me
    objectClass: groupOfNames
    objectClass: top
    cn: datadump-connect
    description: Users that can connect to the datadump database server

  group.datadump-read.ldif: |+
    dn: cn=datadump-read,ou=groups,dc=micahrl,dc=me
    objectClass: groupOfNames
    objectClass: top
    cn: datadump-read
    description: Users that can read from the entire datadump database on the datadump database server

  group.datadump-write.ldif: |+
    dn: cn=datadump-write,ou=groups,dc=micahrl,dc=me
    objectClass: groupOfNames
    objectClass: top
    cn: datadump-write
    description: Users that can write to the entire datadump database on the datadump database server

  group.datadump-admin.ldif: |+
    dn: cn=datadump-admin,ou=groups,dc=micahrl,dc=me
    objectClass: groupOfNames
    objectClass: top
    cn: datadump-admin
    description: Users that can administer the entire datadump database on the datadump database server

  membership.datadump-connect.mrladmin.ldif: |+
    dn: cn=datadump-connect,ou=groups,dc=micahrl,dc=me
    changetype: modify
    add: member
    member: uid=mrladmin,ou=people,dc=micahrl,dc=me

  membership.datadump-admin.mrladmin.ldif: |+
    dn: cn=datadump-admin,ou=groups,dc=micahrl,dc=me
    changetype: modify
    add: member
    member: uid=mrladmin,ou=people,dc=micahrl,dc=me

  membership.datadump-connect.micahrl.ldif: |+
    dn: cn=datadump-connect,ou=groups,dc=micahrl,dc=me
    changetype: modify
    add: member
    member: uid=micahrl,ou=people,dc=micahrl,dc=me

  membership.datadump-read.micahrl.ldif: |+
    dn: cn=datadump-read,ou=groups,dc=micahrl,dc=me
    changetype: modify
    add: member
    member: uid=micahrl,ou=people,dc=micahrl,dc=me
