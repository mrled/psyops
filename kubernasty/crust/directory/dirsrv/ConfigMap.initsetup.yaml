apiVersion: v1
kind: ConfigMap
metadata:
  name: initsetup
  namespace: directory
data:
  envsubst.py: |
    #!/usr/bin/env python3
    # Poor pythonista's envsubst

    import os
    import sys

    for line in sys.stdin:
        sys.stdout.write(os.path.expandvars(line))

  setup.sh: |+
    #!/bin/sh
    set -eu

    # Put the LDAP password somewhere on the filesystem so that we can use it securely.
    umask 077
    mkdir -p /containeripc/topsecret
    # There must be no newline at the end of the password file.
    printf '%s' "$DS_DM_PASSWORD" >/containeripc/topsecret/ds-dm-password
    umask 022

    set -x

    chown -R 389:389 /containeripc
    chown -R 389:389 /data

  ldaprc: |+
    # This file partially configures the OpenLDAP ldap* tools like ldapadd and ldapsearch.
    # This is an ldaprc not an ldap.conf, because the latter cannot specify BINDDN;
    # as such, it must exist in the user's home directory.
    # ldaprc cannot specify the bind password at all (neither can ldap.conf)...
    # OpenLDAP does not support any way of doing this.
    # The ldap* tools don't seem to work with TLS and localhost for some reason?
    # (Even if localhost is in the subjectAltName of the certificate.)
    # So we use the the DNS name.
    # While the other utilities work unencrypted, ldappasswd requires TLS,
    # so we are forced to make TLS work even though the server is on localhost.
    URI ldaps://dirsrv:636
    BINDDN cn=Directory Manager
    TLS_CACERT /data/tls/ca/ca.crt

  profile.ldap.sh: |+
    # Relies on the URI and TLS_CACERT in ldaprc.
    # (I can't seem to get BINDDN to work though, not sure why.)
    alias ldapmodify='ldapmodify -D "cn=Directory Manager" -y /containeripc/topsecret/ds-dm-password'
    alias ldapadd='ldapadd -D "cn=Directory Manager" -y /containeripc/topsecret/ds-dm-password'
    alias ldapsearch='ldapsearch -D "cn=Directory Manager" -y /containeripc/topsecret/ds-dm-password'
    alias ldapdelete='ldapdelete -D "cn=Directory Manager" -y /containeripc/topsecret/ds-dm-password'
    alias ldappasswd='ldappasswd -D "cn=Directory Manager" -y /containeripc/topsecret/ds-dm-password'

  livenessProbe.sh: |+
    #!/bin/sh
    set -eu
    # When this succeeds, the server is up and running,
    # but it may not have finished applying all the configuration.
    # We just check localhost, not the DNS name, because it might not be set up yet.
    # We also don't check TLS.
    ldapsearch -LLL -H ldap://localhost:3389 -D "cn=Directory Manager" -y /containeripc/topsecret/ds-dm-password -b "" -s base "objectclass=*" >/dev/null 2>&1

  livenessProbeLdaps.sh: |+
    #!/bin/sh
    set -eu
    # When this succeeds, the kubernetes Service is responding to secure LDAPS requests.
    # I'm not sure why, but if this command is run early on, it fails.
    # So we wait un a loop until it succeeds, and we use nettimeout=5 to check every 5 seconds (the default is much longer).
    /bin/ldapsearch -LLL -o nettimeout=5 -H ldaps://dirsrv:636 -D "cn=Directory Manager" -y /containeripc/topsecret/ds-dm-password -b "" -s base "objectclass=*" >/dev/null 2>&1

  log.sh: |+
    #!/bin/sh
    verbose="${INITSCRIPT_LOG_VERBOSE:-}"
    set -eu
    if test -n "${verbose}"; then
      echo "$@"
    fi

  configure.sh: |+
    #!/bin/sh
    set -eu
    . /initsetup/profile.ldap.sh

    echo "Starting configure.sh..."

    # Run configuration commands after the server is started.
    # These commands must be idempotent,
    # as a sidecar running this script will be started with the server.

    # Wait until the LDAP server is ready to accept connections.
    # (The stop test makes sure this script doesn't cause a container we want to stop
    # to hang until the stop timeout is reached.)
    while ! /initsetup/livenessProbeLdaps.sh; do
      echo "Waiting for LDAP server to start..."
      if test -f /containeripc/stop; then
        echo "Stopping because the main container is stopping"
        exit 1
      fi
      sleep 1
    done

    # Log initial setup verbosely because it just happens when the container starts.
    export INITSCRIPT_LOG_VERBOSE=true
    /initsetup/configure_backend.sh
    /initsetup/log.sh "Existing ldifMarkers entries:"
    /initsetup/get_marked_ldifs.sh
    /initsetup/apply_ldifs.sh || echo "Failed to apply LDIFs during initialization, continuing..."
    /initsetup/set_account_passwords.sh
    unset INITSCRIPT_LOG_VERBOSE

    echo "We have applied all configuration scripts and are ready to accept traffic."
    touch /containeripc/startupProbe

    echo "Finished initial setup. We now loop forever to check for new ldifs/passwords to apply from the initsetup ConfigMap (and to keep the container running)."
    while true; do
      if test -f /containeripc/stop; then
        echo "Stopping because the main container is stopping"
        exit 0
      fi
      /initsetup/apply_ldifs.sh || echo "Failed to apply LDIFs, continuing..."
      /initsetup/set_account_passwords.sh || echo "Failed to set account passwords, continuing..."
      sleep 5
    done

  configure_backend.sh: |+
    #!/bin/sh
    set -eux
    . /initsetup/profile.ldap.sh

    # Create the main user data backend if it doesn't already exist.
    # Do some initial one-time setup.

    case $(dsconf localhost backend get-tree) in
      *"$DS_SUFFIX_NAME"*)
        echo "Suffix $DS_SUFFIX_NAME already exists as a backend"
        ;;
      *)
        echo "Creating suffix $DS_SUFFIX_NAME as a backend"

        # The name "userroot" is used by convention for the main user data backend,
        # but it can be anything.
        dsconf localhost backend create --suffix "$DS_SUFFIX_NAME" --be-name userroot --create-suffix --create-entries

        # Remove default junk
        ldapmodify -f /initldifs/init.removeDefaultJunk.ldif

        # Create the ldifMarkers OU
        ldapadd -f /initldifs/init.ldifMarkers.ldif

        # Configure the MemberOf plugin
        ldapmodify -f /initldifs/init.enableMemberOf.ldif

        # After enabling MemberOf, we have to reindex
        dsconf localhost backend index reindex userroo
        ;;
    esac

  add_marker.sh: |+
    #!/bin/sh
    set -eu
    . /initsetup/profile.ldap.sh

    # Add a marker to the LDAP server to indicate that a certain LDIF file has been applied.
    # The file should be a bare filename (not a path) and might not actually exist;
    # it is just used as the name for the marker.

    filename="$1"
    if test -z "$filename"; then
      echo "Usage: $0 <filename>"
      exit 1
    fi

    ldapadd <<EOF
    dn: cn=$filename,ou=ldifMarkers,$DS_SUFFIX_NAME
    objectClass: top
    objectClass: organizationalRole
    cn: $filename
    description: LDIF file $filename applied on $(date)
    EOF

  get_marked_ldifs.sh: |+
    #!/bin/sh
    set -eu
    . /initsetup/profile.ldap.sh
    # Get a list of LDIF files that have been marked as applied in the LDAP server.
    # Print the DN of the entry. Each line formatted like:
    #     cn=FILENAME.ldif,ou=ldifMarkers,dc=micahrl,dc=me'
    # The ldif_wrap=no option prevents line wrapping in the middle of the output,
    # which would break the grep/sed below,
    # and more importantly would mean that callers couldn't rely on grepping for a filename.
    dns=$(ldapsearch -o ldif_wrap=no -H ldaps://dirsrv:636 -LLL -b "ou=ldifMarkers,$DS_SUFFIX_NAME" dn)
    # Print just the DN part
    # (... don't do this as a pipe from the ldapsearch command above,
    # because if that fails we want the script to exit with an error code.)
    echo "$dns" | grep '^dn:' | sed 's/^dn: //' | sort

  apply_marked_ldif.sh: |+
    #!/bin/sh
    set -eu
    . /initsetup/profile.ldap.sh

    # Apply an LDIF file and mark it as applied in the LDAP server.

    usage() {
      echo "Usage: $0 <LDIF-FILE> [LDIF-FILE,...]"
    }

    if test "$#" -lt 1; then
      usage
      exit 1
    fi

    # Check for help, and exit early if any LDIF files are missing.
    for ldif in "$@"; do
      case "$ldif" in
        -h|--help) usage; exit 0;;
      esac
      if ! test -f "$ldif"; then
        echo "File not found: $ldif"
        exit 1
      fi
    done

    appliedLdifs="$(/initsetup/get_marked_ldifs.sh)"

    for ldif in "$@"; do
      bn=$(basename "$ldif")
      markerdn="cn=$bn,ou=ldifMarkers,$DS_SUFFIX_NAME"

      case "$appliedLdifs" in
        *"$markerdn"*)
          /initsetup/log.sh "LDIF $bn has already been applied"
          continue
          ;;
      esac

      echo "Add ldifMarkers entry for $bn"
      if ! initsetup/add_marker.sh "$bn"; then
        echo "Failed to add marker for $bn"
        exit 1
      fi

      echo "Applying LDIF $bn"
      if ! ldapadd -f "$ldif"; then
        echo "Failed to apply LDIF $bn"
        ldapdelete "$markerdn"
        exit 1
      fi
    done

  apply_ldifs.sh: |+
    #!/bin/sh
    set -e

    # Check each type of LDIF file in the correct order.
    # If there are any files of that type, apply them.
    # Order: config files, services, users, groups, memberships.

    # Unquoted globs that don't match any files are left unchanged;
    # we check for this to see if any files match.
    set -- /initldifs/config.*.ldif
    if test "$1" != "/initldifs/config.*.ldif"; then
      /initsetup/apply_marked_ldif.sh /initldifs/config.*.ldif
    fi

    set -- /initldifs/service.*.ldif
    if test "$1" != "/initldifs/service.*.ldif"; then
      /initsetup/apply_marked_ldif.sh /initldifs/service.*.ldif
    fi

    set -- /initldifs/user.*.ldif
    if test "$1" != "/initldifs/user.*.ldif"; then
      /initsetup/apply_marked_ldif.sh /initldifs/user.*.ldif
    fi

    set -- /initldifs/group.*.ldif
    if test "$1" != "/initldifs/group.*.ldif"; then
      /initsetup/apply_marked_ldif.sh /initldifs/group.*.ldif
    fi

    set -- /initldifs/membership.*.ldif
    if test "$1" != "/initldifs/membership.*.ldif"; then
      /initsetup/apply_marked_ldif.sh /initldifs/membership.*.ldif
    fi


  set_account_passwords.sh: |+
    #!/bin/sh
    set -eu
    . /initsetup/profile.ldap.sh

    # Set passwords for accounts in the LDAP server from the mounted secret.
    # Unlike the LDIF files, this is run every time the container starts,
    # and any changes made to the password in the Secret will overwrite whatever is in the LDAP server.

    ldapmodify_setpassword() {
      local dn="$1"
      local password="$2"
      /initsetup/log.sh "Setting password for $dn..."

      # Sometimes (I think for service accounts) ldappasswd gives a message like
      #   Result: Object class violation (65)
      #   Additional info: Failed to update password
      # So we use ldapmodify instead
      # ldappasswd -s "$password" "$dn"

      cat >/tmp/ldapmodify <<EOF
    dn: $dn
    changetype: modify
    replace: userPassword
    userPassword: $password
    EOF

      result=$(ldapmodify -f /tmp/ldapmodify 2>&1)
      if test $? -ne 0; then
        /initsetup/log.sh "Failed to set password for $dn"
        echo "$result"
        # Don't fail the whole script; allow this to be retried, maybe users will get created later
        # return 1
      fi
    }

    set_passwords_from_file() {
      local file="$1"
      local base_dn="$2"
      while read -r uid password; do
        test -z "$uid" && continue
        local dn="uid=$uid,$base_dn"
        ldapmodify_setpassword "$dn" "$password"
      done <"$file"
    }

    # Set passwords for regular users and service accounts
    set_passwords_from_file /initsecrets/user-passwords "ou=people,$DS_SUFFIX_NAME"
    set_passwords_from_file /initsecrets/service-passwords "ou=services,$DS_SUFFIX_NAME"

    # Set passwords for enforced users and service accounts
    set_passwords_from_file /initsecrets/enforced-user-passwords "ou=enforced,ou=people,$DS_SUFFIX_NAME"
    set_passwords_from_file /initsecrets/enforced-service-passwords "ou=enforced,ou=services,$DS_SUFFIX_NAME"

  tail_access_log.sh: |+
    #!/bin/sh
    set -eu
    # -F will follow the file even if it is rotated
    tail -F /var/log/dirsrv/access.log &
    while true; do
      if test -f /containeripc/stop; then
        echo "Stopping because the main container is stopping"
        exit 0
      fi
      sleep 5
    done
