apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: datadumppg
  namespace: datadump
  labels:
    # Auto reload the postgres instances (no restart required) when the config here changes
    cnpg.io/reload: "true"
spec:
  instances: 3

  # https://cloudnative-pg.io/documentation/1.25/bootstrap
  # This is ONLY run when the cluster is created.
  bootstrap:
    initdb:
      database: datadump
      # The database owner.
      owner: datadump
      # Secret must have a username that matches the owner above.
      secret:
        name: user-datadump

      # Create roles that cannot log in but can be granted to other roles
      postInitApplicationSQL:
        - CREATE ROLE datadump_read;
        - CREATE ROLE datadump_write;
        - CREATE ROLE datadump_manage;

        - GRANT CONNECT ON DATABASE datadump TO datadump_read, datadump_write, datadump_manage;
        - GRANT USAGE ON SCHEMA public TO datadump_read, datadump_write;
        - GRANT SELECT ON ALL TABLES IN SCHEMA public TO datadump_read;
        - GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO datadump_write;
        - GRANT USAGE, CREATE ON SCHEMA public TO datadump_manage;
        - GRANT ALL ON ALL TABLES IN SCHEMA public TO datadump_manage;

        # Ensure new tables get the same privileges
        - ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO datadump_read;
        - ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO datadump_write;
        - ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO datadump_manage;

  storage:
    size: 50Gi
    # Use minimal replication for the block storage (2rep means 2 replicas)
    # because we are doing data replication at the Postgres level (instances: 3)
    storageClass: cephalopodblk-nvme-2rep

  # https://cloudnative-pg.io/documentation/1.25/declarative_role_management/
  # These are managed by the operator; adding more here will create them in the database too.
  managed:
    # By default, roles here have no permissions on the database.
    # We can't directly grant them permissions
    # (see also https://github.com/cloudnative-pg/cloudnative-pg/discussions/6758),
    # but we can place them in existing roles via inRoles.
    roles:
      - name: workflowexec
        login: true
        passwordSecret:
          name: user-workflowexec
        inherit: true # inherit permissions from the roles that it's a member of
        inRoles:
          - datadump_manage
