apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: oauth2-proxy
  name: oauth2-proxy
  namespace: kubernetes-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oauth2-proxy
  template:
    metadata:
      labels:
        app: oauth2-proxy
    spec:
      containers:
      - name: oauth2-proxy
        image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
        args:
        # Listen
        - --http-address=0.0.0.0:4180
        # Logging
        - --standard-logging=true
        - --request-logging=true
        - --auth-logging=true
        - --silence-ping-logging=true
        # Minor customization
        - --banner="PREPARE FOR BODY CAVITY SEARCH"
        - --provider-display-name="Authelia"
        # Accept any emails passed to us by the auth provider
        - --email-domain=*
        # Reverse proxy to the whoami service to test that it works --
        # this will show the Authorization header in the response,
        # and it can be decoded with any JWT decoder for debugging.
        # - --upstream=http://whoami-authenticated.authelia.svc.cluster.local:80
        # Reverse proxy to the kubernetes-dashboard service in the same namespace
        - --upstream=http://kubernetes-dashboard-kong-proxy:80/
        # Configure the OIDC client
        - --provider=oidc
        - --oidc-issuer-url=https://auth.micahrl.me
        - --scope=openid email groups
        - --redirect-url=https://kubernetes.micahrl.me/oauth2/callback
        - --code-challenge-method=S256
        # Use a cookie to store session state
        - --session-store-type=cookie
        - --cookie-secure=true
        - --cookie-httponly=true
        - --cookie-refresh=15m
        # pass OIDC IDToken to upstream via Authorization Bearer header
        - --pass-authorization-header=true

        envFrom:
        - secretRef:
            name: oauth2-proxy
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /ping
            port: http
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        ports:
        - containerPort: 4180
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 2000
          seccompProfile:
            type: RuntimeDefault
