apiVersion: v1
kind: ConfigMap
metadata:
  name: initldifs
  namespace: directory
data:
  # Don't set passwords here.
  # Place passwords in initsecrets Secret,
  # where a separate script will apply them after creating users/services.

  # They are designed to be applied in order:
  # * The init* LDIFs are applied when the backend is originally set up,
  #   and may expect a certain order.
  #   They are not saved in the ldifMarkers OU.
  # * service*, user*, group*, and membership* LDIFs are first checked
  #   to see if they have been applied before,
  #   by looking for an entry in the ldifMarkers OU.
  # * service*, user*, and group* LDIFs may be applied in any order
  #   and do not depend on each other.
  # * membership* LDIFs must be applied at the end,
  #   after their corresponding groups and services/users have been created.
  #
  # A few notes:
  # * We use objectClass: account for all service accounts
  # * objectClass: inetOrgPerson requires uid/cn/sn
  # * objectClass: posixAccount requires uidNumber/gidNumber/homeDirectory/loginShell/gecos
  # * For an object to support a password, it needs to have an objectClass that supports this,
  #   like inetOrgPerson/organizationalPerson/person; account is not enough.
  #   So we make service accounts also be inetOrgPerson.
  # * Do not put memberUid: ... in group* LDIFs; use membership* LDIFs instead
  # * We put objectClass: top in all LDIFs, apparently this is best practice?
  # * Be careful of blank lines; a blank line indicates a separate LDIF document in the same file.
  # * LDAP group membership is tricky.
  #   We use `member` for LDAP `objectClass: groupOfNames` membership,
  #   and `memberUid` for POSIX `objectClass: posixGroup` membership.
  #   `member` expects a full DN, while `memberUid` expects just the uid.
  #   For a group to be used both ways, it must have both object classes applied,
  #   and both types of membership attributes present.
  # * Speaking of group membership, by default, there is no way to filter for group members;
  #   we enable the MemberOf plugin to allow this.
  #   It only works for LDAP groups, not POSIX groups.
  # * When defining groups, we use cn= for the Relative Distinguished Name
  #   (the first component of the DN),
  #   and the same value must also be provided as a cn attribute.
  #   User entries specify a user's full name in the cn attribute,
  #   which is different from the uid RDN, but groups don't work this way
  #   because the cn is the RDN.
  # * An empty groupOfNames is INVALID, and the LDAP server will refuse to create it.
  #   You must create a group with at least one member.
  #
  # About the ldifMarkers OU:
  # * It will contain one organizationalRole for each LDIF file that has been applied.
  # * We use organizationalRole because it has a cn and a description,
  #   it's standard, and doesn't require anything else.
  #   It would be nice to have a dedicated type for this, but that requires a schema modification.
  #   TODO: Consider using a custom objectClass for ldifMarkers.
  #
  # You can add LDIFs here and apply them without restarting the directory server.
  # * Create the LDIF here
  # * Apply the ConfigMap to Kubernetes with `kubectl apply -f ConfigMap.initldifs.yaml`
  # * Wait for it to be applied...
  #   there is no good way to test this so you can just cat the file from the sidecar like
  #   `kubectl exec -it -n directory dirsrv-0 -c configurator -- cat /initldifs/<YOUR NEW FILE>.ldif`
  # * Run the LDIF apply script like
  #   `kubectl exec -it -n directory dirsrv-0 -c configurator -- /initsetup/apply_ldifs.sh`

  init.ldifMarkers.ldif: |+
    dn: ou=ldifMarkers,dc=micahrl,dc=me
    objectClass: organizationalUnit
    objectClass: top
    ou: ldifMarkers
    description: A list of all the LDIF files that have been applied.

  init.removeDefaultJunk.ldif: |+
    dn: uid=demo_user,ou=people,dc=micahrl,dc=me
    changetype: delete

    dn: cn=demo_group,ou=Groups,dc=micahrl,dc=me
    changetype: delete

  # Automatically add a memberOf attribute to each user entry for each group they are a member of.
  # Without this, you can't search for users by group membership. (lol)
  # This is done only for LDAP `member` attributes, not POSIX `memberUid` attributes.
  # (If necessary, make users both `member: ...` and `memberUid: ...` of the same group.)
  init.enableMemberOf.ldif: |+
    dn: cn=MemberOf Plugin,cn=plugins,cn=config
    changetype: modify
    replace: nsslapd-pluginEnabled
    nsslapd-pluginEnabled: on

  # TODO: this is idempotent, maybe I need a way to write idempotent LDIFs that get applied every time?
  config.accessLog.ldif: |+
    dn: cn=config
    changetype: modify
    replace: nsslapd-accesslog-level
    nsslapd-accesslog-level: 256
    -
    replace: nsslapd-accesslog-logging-enabled
    nsslapd-accesslog-logging-enabled: on
    -
    replace: nsslapd-accesslog
    nsslapd-accesslog: /data/logs/access
    -
    replace: nsslapd-accesslog-maxlogsize
    # It is rotated if it reaches this size in MB
    nsslapd-accesslog-maxlogsize: 10
    -
    replace: nsslapd-accesslog-maxlogsperdir
    nsslapd-accesslog-maxlogsperdir: 5
    -
    replace: nsslapd-accesslog-logbuffering
    nsslapd-accesslog-logbuffering: off

  config.errorLog.ldif: |+
    dn: cn=config
    changetype: modify
    replace: nsslapd-errorlog-level
    nsslapd-errorlog-level: 8192
    -
    replace: nsslapd-errorlog-logging-enabled
    nsslapd-errorlog-logging-enabled: on
    -
    replace: nsslapd-errorlog
    nsslapd-errorlog: /data/logs/errors
    -
    replace: nsslapd-errorlog-maxlogsize
    nsslapd-errorlog-maxlogsize: 10
    -
    replace: nsslapd-errorlog-maxlogsperdir
    nsslapd-errorlog-maxlogsperdir: 5

  # config.securityLog.ldif: |+
  #   dn: cn=config
  #   changetype: modify
  #   replace: nsslapd-securitylog-level
  #   nsslapd-security-log-level: 256
  #   -
  #   replace: nsslapd-securitylog-logging-enabled
  #   nsslapd-security-log-logging-enabled: on
  #   -
  #   replace: nsslapd-securitylog
  #   nsslapd-security-log: /data/logs/security
  #   -
  #   replace: nsslapd-securitylog-maxlogsize
  #   nsslapd-security-log-maxlogsize: 10
  #   -
  #   replace: nsslapd-securitylog-maxlogsperdir
  #   nsslapd-security-log-maxlogsperdir: 5

  # TODO: arguably the permissions should be set at the group level
  # Note that the userdn specified here does not need to exist yet

  config.autheliaEnforcedReadAllObjectsAci.ldif: |+
    dn: dc=micahrl,dc=me
    changetype: modify
    add: aci
    aci: (targetattr="*")(version 3.0; acl "Allow read access to authelia"; allow (read, search, compare) userdn="ldap:///uid=authelia,ou=enforced,ou=services,dc=micahrl,dc=me";)

  config.authenticatorEnforcedReadAllObjectsAci.ldif: |+
    dn: dc=micahrl,dc=me
    changetype: modify
    add: aci
    aci: (targetattr="*")(version 3.0; acl "Allow read access to all objects for the authenticator"; allow (read, search, compare) userdn = "ldap:///uid=authenticator,ou=enforced,ou=services,dc=micahrl,dc=me";)
