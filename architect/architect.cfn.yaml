AWSTemplateFormatVersion: 2010-09-09
Description: Architect CI stack

Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Default: ArchitectKeyPair
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  Ec2InstanceArch:
    Default: HVM64
    Type: String
  Ec2InstanceNatArch:
    Default: NATHVM64
    Type: String
  Ec2InstanceProfileName:
    Description: Name of an instance profile to assign to the Architect EC2 instance. This profile should have permission to read from the KMS passed as KmsId.
    Type: String
  Ec2DebianStretchAmi:
    Default: ami-4d183328  # Debian Stretch in us-east-2
    Type: String
  VpcCidrBlock:
    Default: 10.0.0.0/16
    Type: String
  VpcSubnetBlock:
    Default: 10.0.0.0/24
    Type: String
  VpnIpsecUserConf:
    Description: An ipsec.conf file
    Type: String
  VpnIpsecUserSecrets:
    Description: An ipsec.secrets file
    Type: String
  VpnKeyEncrypted:
    Description: A private key to connect to the IPSEC VPN, in PEM format, encrypted by the KMS
    Type: String
  VpnCert:
    Description: A certificate corresponding to VpnKeyEncrypted used to connect to the IPSEC VPN, in PEM format
    Type: String
  VpnCaCert:
    Description: Certificate for the IPSEC VPN certificate authority
    Type: String
  KmsId:
    Description: The ID of the KMS to use to descrypt the VPN PKCS12 key and certificate
    Type: String

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref VpcSubnetBlock
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  OutBoundNetworkTcpAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutBoundNetworkUdpAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '17'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InboundNetworkTcpAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InboundNetworkUdpAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '103'
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InboundNetworkIcmpAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '104'
      Protocol: '1'
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: -1
        Type: -1
  OutboundNetworkIcmpAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '104'
      Protocol: '1'
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: -1
        Type: -1

  SubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl
  IPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref ArchitectInstance

  ArchitectInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Architect instance security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - Description: HTTP
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - Description: HTTPS
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - Description: DNS
          IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 0.0.0.0/0
        - Description: IPSEC
          IpProtocol: udp
          FromPort: '500'
          ToPort: '500'
          CidrIp: 0.0.0.0/0
        - Description: IPSEC
          IpProtocol: udp
          FromPort: '4500'
          ToPort: '4500'
          CidrIp: 0.0.0.0/0
        - Description: Ping lol
          IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0

  ArchitectInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Metadata:
      Comment: Set up StrongSwan to connect to VPN
      'AWS::CloudFormation::Init':

        configSets:
          default:
            - configAwsCli
            - configDhcp
            - configVpn
            # - configDebugging
            - configDocker

        configDebugging:
          packages:
            apt:
              dnsutils: []

        configAwsCli:
          packages:
            apt:
              python-pip: []
          commands:
            install-aws-cli:
              command: pip install awscli --upgrade --user
              ignoreErrors: false

        configVpn:
          packages:
            apt:
              strongswan-charon: []
              strongswan-pki: []  # not required for normal operation, but useful for troubleshooting
          # NOTE: it's OK to replace files installed from APT packages here because packages get installed first
          files:
            /etc/ipsec.conf:
              content: !Ref VpnIpsecUserConf
              mode: '000400'
              owner: root
              group: root
            /etc/ipsec.secrets:
              content: !Ref VpnIpsecUserSecrets
              mode: '000400'
              owner: root
              group: root
            /etc/ipsec.d/private/architect.key.b64.kmsencrypted.b64:
              content: !Ref VpnKeyEncrypted
              mode: '000400'
              owner: root
              group: root
            /etc/ipsec.d/certs/architect.crt:
              content: !Ref VpnCert
              mode: '000400'
              owner: root
              group: root
            /etc/ipsec.d/cacerts/cacert.pem:
              content: !Ref VpnCaCert
              mode: '000400'
              owner: root
              group: root
            /usr/local/bin/decrypt-vpn-key.sh:
              # NOTE: use of the `aws` command requires that the EC2 instance have a profile with an IAM role
              #       as well as the AWS_DEFAULT_REGION environment variable to be set
              content: !Join
                - "\n"
                - - |
                    #!/bin/sh
                    if test -z "$AWS_DEFAULT_REGION"; then
                        echo "ERROR - \$AWS_DEFAULT_REGION IS NOT SET"
                        exit 1
                    fi
                    set -eu
                    umask 0077
                    key=/etc/ipsec.d/private/architect.key
                    key_b64="${key}.b64"
                    key_b64_enc="${key_b64}.kmsencrypted"
                    key_b64_enc_b64="${key_b64_enc}.b64"
                    base64 -d < "$key_b64_enc_b64" > "$key_b64_enc"
                    aws kms decrypt --ciphertext-blob "fileb://${key_b64_enc}" --query "Plaintext" --output text > "$key_b64"
                    base64 -d < "$key_b64" > "$key"
                    systemctl enable strongswan
                    systemctl start strongswan
              mode: '000755'
              owner: root
              group: root
          commands:
            decrypt-vpn-private-key:
              command: /usr/local/bin/decrypt-vpn-key.sh
              env:
                AWS_DEFAULT_REGION: !Ref AWS::Region
              ignoreErrors: false

        configDhcp:
          # By default, EC2 instances pull DNS servers from DHCP
          # This means on each DHCP update, /etc/resolv.conf gets overwritten
          # We want to use the DNS server we get from strongswan,
          # so remove the options requesting DNS server, hostname, etc
          # The original file contents were:
          #     option rfc3442-classless-static-routes code 121 = array of unsigned integer 8;
          #     send host-name = gethostname();
          #     request subnet-mask, broadcast-address, time-offset, routers,
          #             domain-name, domain-name-servers, domain-search, host-name,
          #             dhcp6.name-servers, dhcp6.domain-search, dhcp6.fqdn, dhcp6.sntp-servers,
          #             netbios-name-servers, netbios-scope, interface-mtu,
          #             rfc3442-classless-static-routes, ntp-servers;
          files:
            /etc/dhcp/dhclient.conf:
              content: !Join
                - "\n"
                - - |
                    option rfc3442-classless-static-routes code 121 = array of unsigned integer 8;
                    send host-name = gethostname();
                    request subnet-mask, broadcast-address, time-offset, routers,
                            dhcp6.sntp-servers, interface-mtu,
                            rfc3442-classless-static-routes, ntp-servers;
              mode: '000644'
              owner: root
              group: root
          commands:
            restart-networking:
              command: systemctl restart networking

        configDocker:
          packages:
            apt:
              apt-transport-https: []
              ca-certificates: []
              curl: []
              gnupg2: []
              openssl: []
              software-properties-common: []
          files:
            /usr/local/bin/setup-docker.sh:
              content: !Join
                - "\n"
                - - |
                    #!/bin/sh
                    set -eu
                    distroid=$(. /etc/os-release; echo "$ID")
                    releasename=$(lsb_release -cs)
                    curl -fsSL https://download.docker.com/linux/$distroid/gpg | sudo apt-key add -
                    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$distroid $releasename stable"
                    apt-get update
                    apt-get install -y docker-ce
              mode: '000755'
              owner: root
              group: root
          commands:
            setup-docker:
              command: /usr/local/bin/setup-docker.sh
              ignoreErrors: false

    Properties:
      ImageId: !Ref Ec2DebianStretchAmi
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref Ec2InstanceProfileName
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: Architect
      NetworkInterfaces:
        - GroupSet:
            - !Ref ArchitectInstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet

      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            set -eu
            # Set config values. These are replaced at deployment time by CloudFormation.
            stackname="${AWS::StackName}"
            region="${AWS::Region}"
            # Install AWS CFN Bootstrap scripts
            apt-get update
            apt-get -uy install python-setuptools
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            # Bootstrap CFN
            cfn-init --verbose --stack "$stackname" --resource ArchitectInstance --region "$region"
            cfn-signal --exit-code $? --stack "$stackname" --resource ArchitectInstance --region "$region"

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

Outputs:
  ArchitectIpAddress:
    Value: !GetAtt
      - ArchitectInstance
      - PublicIp
    Description: Architect IP address
  ArchitectInstanceId:
    Value: !Ref ArchitectInstance
