AWSTemplateFormatVersion: 2010-09-09
Description: Architect CI stack

Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Default: ArchitectKeyPair
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  Ec2InstanceArch:
    Default: HVM64
    Type: String
  Ec2InstanceNatArch:
    Default: NATHVM64
    Type: String
  Ec2DebianStretchAmi:
    Default: ami-4d183328  # Debian Stretch in us-east-2
    Type: String
  VpcCidrBlock:
    Default: 10.0.0.0/16
    Type: String
  VpcSubnetBlock:
    Default: 10.0.0.0/24
    Type: String
  VpnIpsecUserConf:
    Description: An ipsec.conf file
    Type: String
    Default: TEST
  VpnIpsecUserSecrets:
    Description: An ipsec.secrets file
    Type: String
    Default: TEST
  VpnUserCert:
    Description: The public certificate used to connect to the IPSEC VPN
    Type: String
    Default: TEST
  VpnUserKey:
    Description: The private key used to connect to the IPSEC VPN
    Type: String
    Default: TEST

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref VpcSubnetBlock
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  OutBoundNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InboundNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  SubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl
  IPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref ArchitectInstance

  ArchitectInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Architect instance security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref SSHLocation

  ArchitectInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Metadata:
      Comment: Set up StrongSwan to connect to VPN
      'AWS::CloudFormation::Init':
        config:
          packages:
            apt:
              strongswan: []
              apt-transport-https: []
              ca-certificates: []
              curl: []
              gnupg2: []
              software-properties-common: []
          files:
            /etc/strongswan/ipsec.conf:
              content: !Ref VpnIpsecUserConf
              mode: '000400'
              owner: root
              group: root
            /etc/strongswan/ipsec.secrets:
              content: !Ref VpnIpsecUserSecrets
              mode: '000400'
              owner: root
              group: root
            /etc/strongswan/user.key:
              content: !Ref VpnUserKey
              mode: '000400'
              owner: root
              group: root
            /etc/strongswan/user.cert:
              content: !Ref VpnUserCert
              mode: '000400'
              owner: root
              group: root
            /usr/local/bin/setup-docker.sh:
              content: !Join
                - "\n"
                - - |
                    #!/bin/sh
                    set -eu
                    distroid=$(. /etc/os-release; echo "$ID")
                    curl -fsSL https://download.docker.com/linux/$distroid/gpg | sudo apt-key add -
                    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$distroid $(lsb_release -cs) stable"
                    apt-get update
                    apt-get install -y docker-ce
              mode: '000755'
              owner: root
              group: root

          commands:
            setup-docker:
              command: "/usr/local/bin/setup-docker.sh"
              ignoreErrors: false

    Properties:
      ImageId: !Ref Ec2DebianStretchAmi
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: Architect
      NetworkInterfaces:
        - GroupSet:
            - !Ref ArchitectInstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet

      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            apt-get update
            apt-get -uy install python-setuptools software-properties-common
            mkdir -p /usr/local/src/aws-cfn-bootstrap-latest
            curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C /usr/local/src/aws-cfn-bootstrap-latest --strip-components 1
            easy_install /usr/local/src/aws-cfn-bootstrap-latest

            cfn-init -v --stack ${AWS::StackName} --resource ArchitectInstance --region ${AWS::Region}
            cfn-signal -e $? --stack ${AWS::StackName} --resource ArchitectInstance --region ${AWS::Region}


      # UserData: !Base64 
      #   'Fn::Join':
      #     - ''
      #     - - |
      #         #!/bin/bash -xe
      #         apt-get update
      #         apt-get -uy install python-setuptools software-properties-common
      #         mkdir -p /usr/local/src/aws-cfn-bootstrap-latest
      #         curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C /usr/local/src/aws-cfn-bootstrap-latest --strip-components 1
      #         easy_install /usr/local/src/aws-cfn-bootstrap-latest
      #       - |+

      #       # - 'cfn-init -v '
      #       # - '         --stack '
      #       # - !Ref 'AWS::StackName'
      #       # - '         --resource ArchitectInstance '
      #       # - '         --region '
      #       # - !Ref 'AWS::Region'
      #       # - |+

      #       - 'cfn-signal -e $? '
      #       - '         --stack '
      #       - !Ref 'AWS::StackName'
      #       - '         --resource ArchitectInstance '
      #       - '         --region '
      #       - !Ref 'AWS::Region'
      #       - |+

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

Outputs:
  ArchitectIpAddress:
    Value: !GetAtt
      - ArchitectInstance
      - PublicIp
    Description: Architect IP address
