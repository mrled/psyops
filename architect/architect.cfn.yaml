AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template VPC_Single_Instance_In_Subnet: Sample
  template showing how to create a VPC and add an EC2 instance with an Elastic
  IP address and a security group. **WARNING** This template creates an Amazon
  EC2 instance. You will be billed for the AWS resources used if you create a
  stack from this template.

Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  Ec2InstanceArch:
    Default: HVM64
  Ec2InstanceNatArch:
    Default: NATHVM64
  Ec2InstanceAmi:
    Default: ami-4d183328  # Debian Stretch in us-east-2
  VpcCidrBlock:
    Default: 10.0.0.0/16
  VpcSubnetBlock:
    Default: 10.0.0.0/24
  VpnIpsecUserConf:
    Description: An ipsec.conf file
    Type: String
  VpnIpsecUserSecrets:
    Description: An ipsec.secrets file
    Type: String
  VpnUserCert:
    Description: A public certificate used to connect to the VPN
    Type: String
  VpnUserKey:
    Description: The private key corresponding to VpnUserCert
    Type: String

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref VpcSubnetBlock
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  OutBoundNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  SubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl
  IPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref WebServerInstance

  ArchitectInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Architect instance security group

  ArchitectInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Metadata:
      Comment: Set up StrongSwan to connect to VPN
      'AWS::CloudFormation::Init':
        config:
          packages:
            apt:
              strongswan: []
              apt-transport-https: []
              ca-certificates: []
              curl: []
              gnupg2: []
              software-propeties-common: []
          files:
            /etc/strongswan/ipsec.conf:
              content: VpnIpsecUserConf
            /etc/strongswan/ipsec.secrets:
              content: VpnIpsecUserSecrets
            /etc/strongswan/user.cert:
              content: VpnUserCert
            /etc/strongswan/user.key:
              content: VpnUserkey

    Properties:
      ImageId: !Ref Ec2InstanceAmi
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
      NetworkInterfaces:
        - GroupSet:
            - !Ref ArchitectInstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
      UserData: {"Fn::Base64": {"Fn::Join": ["\n", [
        "#!/bin/sh"
        "set -eu"
        "baseurl=https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")"
        "curl -fsSL $baseurl/gpg | sudo apt-key add -"
        "sudo add-apt-repository \"deb [arch=amd64] $baseurl $(lsb_release -cs) stable\""
        "apt-get update"
        "apt-get install docker-ce"
      ]]}}

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

Outputs:
  URL:
    Value: !GetAtt
      - WebServerInstance
      - PublicIp
    Description: Newly created application URL
