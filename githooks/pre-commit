#!/usr/bin/env python3

import re
import subprocess
import sys
from os import path


def sh(cmd):
    return subprocess.run(
        cmd, shell=True, check=True, text=True, capture_output=True
    ).stdout


def get_files_to_commit() -> list[str]:
    staged_files = sh(
        "git --no-pager diff --cached --name-only --diff-filter=ACM"
    ).splitlines()
    modified_files = sh("git ls-files --modified").splitlines()
    return list(set(staged_files + modified_files))


def check_sops_clean():
    """Check if the git filter for sops is set up correctly.

    We have the sops filter set up in .gitattributes,
    but if the filter hasn't been configured in this repository,
    git will just silently ignore it. Lol
    """
    try:
        sh("git config --get filter.sops.clean")
        return True
    except BaseException:
        return False


def check_for_unencrypted_k8s_secrets(committing_files: list[str]):
    k8s_secrets = [
        f
        for f in committing_files
        if (f.startswith("kubernasty") or f.startswith("seedboxk8s"))
        and path.basename(f).startswith("Secret")
        and path.exists(f)
    ]
    for file in k8s_secrets:
        with open(file, "r") as f:
            content = f.read()
            if re.search(r"^sops:$", content, re.MULTILINE) is None:
                if "psyops-ignore-pre-commit-secret-check" in content:
                    print(
                        f"Warning: Secret file '{file}' is not encrypted but ignored by psyops!"
                    )
                    continue
                print(f"Error: Secret file '{file}' is not encrypted by SOPS!")
                sys.exit(1)


def check_for_DONOTCOMMIT(committing_files: list[str]):
    for file in committing_files:
        if file == "githooks/pre-commit":
            # Ignore this file, which of course must contain "DONOTCOMMIT"
            continue
        if path.isdir(file):
            # Ignore directories, which can happen for submodules
            continue
        if not path.exists(file):
            continue
        with open(file, "r") as f:
            try:
                content = f.read()
            except UnicodeDecodeError:
                print(
                    f"Error: File '{file}' is not a text file, not scanning for 'DONOTCOMMIT'"
                )
                continue
            if "DONOTCOMMIT" in content:
                print(f"Error: File '{file}' contains 'DONOTCOMMIT'!")
                sys.exit(1)


if __name__ == "__main__":

    files_to_commit = get_files_to_commit()

    # Only check for unencrypted k8s secrets if the sops filter is not installed.
    # If the filter is installed, then the clean filter will encrypt the files before they are committed.
    if not check_sops_clean():
        check_for_unencrypted_k8s_secrets(files_to_commit)

    check_for_DONOTCOMMIT(files_to_commit)

    sys.exit(0)
