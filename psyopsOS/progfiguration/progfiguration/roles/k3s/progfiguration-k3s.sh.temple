#!/bin/sh
set -eu

#### Configured in the progfiguration role
# The interface that will have the VIP added to it
# This must be the same on all nodes for kube-vip!
# Which is one reason we rename the primary NIC to psy0 earlier in the boot process.
interface={$}k3s_interface
# The address to use for the floating VIP
vipaddress={$}k3s_vipaddress


usage() {
    cat <<ENDUSAGE
Usage: $0 [-h] <ACTION> [ARGS]
progfiguration k3s cluster management

To configure a cluster, first run '$0 init' on the first node,
get the token with '$0 token' on that node,
and then run '$0 join <TOKEN>' on the other nodes.

ARGUMENTS
    -h | --help: Print help and exit

    ACTION: The action to perform. Valid values are:
        Cluster membership options:
        init:           Initialize a new cluster after configuring kube-vip
        join <TOKEN>:   Join an existing cluster
                        Requires a token from the cluster init node
        leave:          Leave the cluster -- not clean, should reboot after
                        WARNING: THIS WILL WIPE ALL KUBERNETES DATA ON THIS NODE, INCLUDING CEPH/LONGHORN DATA!

        Information gathering options:
        token:          Get the token for joining the cluster
        kubeconfig:     Get a kubeconfig file for the cluster

        Debugging options:
        kubevip-only:   Configure kube-vip, without initializing a new cluster (for debugging)
        init-only:      Initialize a new cluster, without configuring kube-vip (for debugging)

ENDUSAGE
}


exit_error_usage() {
    echo "$1"
    echo
    usage
    exit 1
}


# Create the kube-vip manifest
# Adapted from basic kube-vip installation documentation
action_kubevip_init() {
    # Working directory for creating the kube-vip manifest
    tmpinit=/var/lib/rancher/k3s/server/tmpinit
    mkdir -p "$tmpinit"

    # Get the RBAC manifest, which will be the start of the kube-vip manifest
    curl https://kube-vip.io/manifests/rbac.yaml -o "$tmpinit/kube-vip.yaml"

    # Set an alias for easier use
    kvversion=$(curl -sL https://api.github.com/repos/kube-vip/kube-vip/releases | jq -r ".[0].name")
    ctr images pull ghcr.io/kube-vip/kube-vip:$kvversion
    kubevip="ctr run --rm --net-host ghcr.io/kube-vip/kube-vip:$kvversion vip /kube-vip"
    # Now you can run like '$kubevip -h' to see help

    # Generate the DaemonSet manifest.
    # This can be combined with the RBAC manifest by separating them with `\n---\n`,
    # the standard YAML document separator.

    printf "\n---\n" >> "$tmpinit/kube-vip.yaml"
    $kubevip manifest daemonset \
        --interface $interface \
        --address $vipaddress \
        --inCluster \
        --taint \
        --controlplane \
        --services \
        --arp \
        --leaderElection >> "$tmpinit/kube-vip.yaml"

    # Copy it to the manifests folder (only needs to happen on the first cluster member)
    mkdir -p /var/lib/rancher/k3s/server/manifests
    cp "$tmpinit/kube-vip.yaml" /var/lib/rancher/k3s/server/manifests/
}


# Initialize a new cluster
# Adapted from basic k3s installation documentation
#
# The docs have you launch with "k3s server --cluster-init",
# and then wait for an undetermined amount of time, kill it,
# and then launch it again without --cluster-init.
#
# Instead, we modify the config file to pass the --cluster-init option before first launch,
# then change it back to the default after launch while k3s is still running.
# This way, 'rc-service k3s ...' commands all work as expected.
action_init() {
    # Set options for starting k3s and creating the cluster
    cat >/etc/conf.d/k3s <<ENDK3S
export PATH="/usr/libexec/cni/:\$PATH"
K3S_EXEC="server"
K3S_OPTS="--cluster-init"
ENDK3S

    # Start k3s via OpenRC
    rc-service k3s start

    # Set default options for k3s, just the default k33s file from the Alpine package
    cat >/etc/conf.d/k3s <<ENDK3S
export PATH="/usr/libexec/cni/:\$PATH"
K3S_EXEC="server"
K3S_OPTS=""
ENDK3S
}


# Retrieve the token for joining the cluster
# Cluster must have already been initialized
action_gettoken() {
    tokfile=/var/lib/rancher/k3s/server/token
    if test ! -f "$tokfile"; then
        exit_error_usage "Cluster has not been initialized on this node yet"
    fi
    cat /var/lib/rancher/k3s/server/node-token
}


# Retrieve a kubeconfig file for the cluster.
# Modify it to use the VIP address.
action_kubeconfig() {
    sed "s/127.0.0.1/$vipaddress/g" /etc/rancher/k3s/k3s.yaml
}


# Join an existing cluster.
# Adapted from basic k3s installation documentation and Alpine OpenRC scripts.
#
# THe docs have you launch with "k3s server --server https:....",
# and then wait for an undetermined amount of time, kill it,
# and launch it from rc-service which does so without the --server option.
#
# Instead, we modify the config file to pass the --server option and K3S_TOKEN var before first launch,
# then change it back to the default after launch while k3s is still running.
# This way, 'rc-service k3s ...' commands all work as expected.
action_join() {
    k3s_token="$1"

    # Set options for joining the cluster
    # This is only necessary the first time
    cat >/etc/conf.d/k3s <<ENDK3S
export K3S_TOKEN=$k3s_token
export PATH="/usr/libexec/cni/:\$PATH"
K3S_EXEC="server"
K3S_OPTS="--server https://$vipaddress:6443"
ENDK3S

    # Start k3s via OpenRC
    rc-service k3s start

    # Set default options for k3s, removing the joining options from earlier
    # This is just the default conf.d/k3s file from the Alpine package
    cat >/etc/conf.d/k3s <<ENDK3S
export PATH="/usr/libexec/cni/:\$PATH"
K3S_EXEC="server"
K3S_OPTS=""
ENDK3S
}


# Leave the cluster
# We use the Alpine k3s package, rather than curlbash’ing the installer.
# This means that we don’t get a nice k3s-uninstall.sh script for us.
# (We do have a k3s-killall.sh which we have adapted from upstream.)
# See upstream code: <https://github.com/k3s-io/k3s/blob/03885fc38532afcb944c892121ffe96b201fc020/install.sh#L407-L449>
#
# This is tied to other psyopsOS conventions and what our cluster runs.
# For instance, the cluster runs Longhorn and Ceph,
# and we have to clean those up specially.
#
# After this, it is safest to reboot.
# If you do this, make sure to set k3s_start to False in the progfiguration role.
action_leave() {
    # Stop all containers and the k3s service itself
    # Note: This does unmount /var/lib/rancher/k3s; we have to remount it below
    k3s-killall.sh

    rc-service containerd stop
    rc-service iscsid stop

    set +e

    # This is also necessary for some reason?
    killall containerd-shim-runc-v2 traefik longhorn longhorn-manager kube-vip runsvdir pause sleep tini livenessprobe csi-node-driver-registrar cephcsi entry

    # Make sure all relevant longhorn/ceph processes are killed too - might be some you have to clean up manually
    if ps aux | grep -v grep | grep -i longhorn; then
        echo "Longhorn processes still running, please kill them manually"
        exit 1
    elif ps aux | grep -v grep | grep -i ceph; then
        echo "Ceph processes still running, please kill them manually"
        exit 1
    fi

    # Unmount a bunch of bullshit that Docker mounts
    umount /run/netns/* /var/lib/kubelet/pods/*/volumes/*/*

    # Remove old cluster config/state.
    # Do NOT remove /var/lib/rancher/k3s because that's an overlay mountpoint on psyopsOS
    rm -rf /etc/rancher/k3s /psyopsos-data/overlays/var-lib-rancher-k3s/*

    # Recommended in the kube-vip k3s documentation https://kube-vip.io/docs/usage/k3s/
    ip addr flush dev lo
    ip addr add 127.0.0.1/8 dev lo

    # Make sure that /var/lib/rancher/k3s is mounted
    mount -o bind /psyopsos-data/overlays/var-lib-rancher-k3s /var/lib/rancher/k3s

    # Remove k3s configuration file
    rm -f /etc/rancher/k3s/k3s.yaml

    set -e
}


# Process script arguments
action=
token=
while test $# -gt 0; do
    case "$1" in
        -h | --help ) usage; exit 0;;
        *)
            if test -z "$action"; then
                action="$1"
            elif test "$action" = "join"; then
                if test -z "$token"; then
                    token="$1"
                else
                    exit_error_usage "Unknown argument: $1"
                fi
            else
                exit_error_usage "Unknown argument: $1"
            fi
            shift
            ;;
    esac
done

if test -z "$action"; then
    exit_error_usage "No action specified"
elif test "$action" = "join" -a -z "$token"; then
    exit_error_usage "No token specified"
fi

if test "$action" = "kubevip-only"; then
    action_kubevip_init
elif test "$action" = "init-only"; then
    action_init
elif test "$action" = "init"; then
    action_kubevip_init
    action_init
elif test "$action" = "token"; then
    action_gettoken
elif test "$action" = "kubeconfig"; then
    action_kubeconfig
elif test "$action" = "join"; then
    action_join "$token"
elif test "$action" = "leave"; then
    action_leave
else
    exit_error_usage "Unknown action: $action"
fi
